{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\player\\\\Documents\\\\GitHub\\\\synask-app\\\\src\\\\components\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport UserContext from './UserContext';\nimport { supabase } from '../pages/config/SupabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [userId, setUserId] = useState(null);\n  const navigate = useNavigate();\n  const {\n    userData,\n    setUserData,\n    friends,\n    setFriends\n  } = useContext(UserContext);\n  var UserData = {};\n  const arraysAreEqual = (arr1, arr2) => {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n  useEffect(() => {\n    const checkSession = async () => {\n      console.log('Checking session...');\n      const {\n        data,\n        error\n      } = await supabase.auth.getUser();\n      if (error) {\n        console.error('Error checking session:', error);\n        setIsAuthenticated(false);\n        setLoading(false);\n        return;\n      }\n      if (data) {\n        console.log('User authenticated:', data.user.id);\n        setIsAuthenticated(true);\n        setUserId(data.user.id);\n      } else {\n        console.log('User not authenticated');\n        setIsAuthenticated(false);\n      }\n      setLoading(false);\n    };\n    checkSession();\n  }, []);\n  useEffect(() => {\n    if (!userId) return;\n    const fetchInitialData = async () => {\n      console.log('Fetching initial data...');\n      try {\n        const {\n          data: dataPub,\n          error: errorPub\n        } = await supabase.from('users_public_information').select('*').eq('auth_id', userId).single();\n        if (errorPub) throw errorPub;\n        console.log('Initial data fetched:', dataPub);\n        const {\n          data: dataPriv,\n          error: errorPriv\n        } = await supabase.from('users_private_information').select('*').eq('auth_id', userId).single();\n        if (errorPriv) throw errorPriv;\n        console.log('Initial data fetched:', dataPriv);\n\n        // Set user data\n        UserData = {\n          auth_id: dataPub.auth_id,\n          first_name: dataPub.first_name,\n          last_name: dataPub.last_name,\n          avatar_url: dataPub.avatar_url,\n          status: dataPub.status,\n          username: dataPub.username,\n          contacts: dataPriv.contacts\n        };\n        setUserData(UserData);\n\n        // Extract contacts\n        const initialContacts = dataPriv.contacts || [];\n        console.log('Initial contacts:', initialContacts);\n        updateFriendsList(initialContacts);\n\n        // Subscribe to changes\n        const userChannel = supabase.channel(`user:${userId}`).on('postgres_changes', {\n          event: 'UPDATE',\n          schema: 'public',\n          table: 'users_public_information',\n          filter: `auth_id=eq.${userId}`\n        }, payload => {\n          console.log('Public information change detected:', payload);\n          handleUserDataChange(payload);\n        }).on('postgres_changes', {\n          event: 'UPDATE',\n          schema: 'public',\n          table: 'users_private_information',\n          filter: `auth_id=eq.${userId}`\n        }, payload => {\n          console.log('Private information change detected:', payload);\n          handleUserDataChange(payload);\n        }).subscribe();\n\n        // Function to handle the update\n        function handleUserDataChange(payload) {\n          console.log(payload.new.contacts, UserData.contacts);\n          if (!arraysAreEqual(payload.new.contacts || [], UserData.contacts || [])) {\n            const newContacts = payload.new.contacts || [];\n            console.log('Contacts updated:', newContacts);\n            console.log('UserData:', UserData);\n            const updatedUserData = {\n              ...UserData,\n              contacts: newContacts\n            };\n            UserData = updatedUserData;\n            setUserData(updatedUserData);\n            updateFriendsList(newContacts);\n          } else {\n            UserData = {\n              auth_id: payload.new.auth_id,\n              first_name: payload.new.first_name,\n              last_name: payload.new.last_name,\n              avatar_url: payload.new.avatar_url,\n              status: payload.new.status,\n              username: payload.new.username,\n              contacts: payload.new.contacts\n            };\n            setUserData(UserData);\n          }\n        }\n\n        // Subscribe to changes for each contact\n        const friendsChannels = initialContacts.map(auth_id => supabase.channel(`contact:${auth_id}`).on('postgres_changes', {\n          event: 'UPDATE',\n          schema: 'public',\n          table: 'users_public_information',\n          filter: `auth_id=eq.${auth_id}`\n        }, payload => {\n          console.log('Contact status change detected:', payload);\n          setFriends(prev => prev.map(friend => friend.auth_id === payload.new.auth_id ? {\n            ...friend,\n            status: payload.new.status\n          } : friend));\n        }).subscribe());\n        return () => {\n          console.log('Removing user channel');\n          supabase.removeChannel(userChannel);\n          friendsChannels.forEach(channel => supabase.removeChannel(channel));\n        };\n      } catch (error) {\n        console.error('Error fetching initial data:', error);\n      }\n    };\n    const updateFriendsList = async contacts => {\n      console.log('Updating friends list...');\n      const currentFriendsIds = friends.map(friend => friend.auth_id);\n      const newFriendsIds = contacts.filter(auth_id => !currentFriendsIds.includes(auth_id));\n      const removedFriends = friends.filter(friend => !contacts.includes(friend.auth_id));\n      console.log('Removed friends:', removedFriends);\n      setFriends(prev => prev.filter(friend => !removedFriends.some(removedFriend => removedFriend.auth_id === friend.auth_id)));\n      if (newFriendsIds.length > 0) {\n        const {\n          data,\n          error\n        } = await supabase.from('users_public_information').select('auth_id, username, first_name, last_name, avatar_url, cover_url, status, tags').in('auth_id', newFriendsIds);\n        if (error) {\n          console.error('Error fetching new friends data:', error);\n          return;\n        }\n        console.log('New friends data:', data);\n        setFriends(data);\n      }\n    };\n    fetchInitialData();\n  }, [userId]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 25\n  }, this);\n  return isAuthenticated ? children : /*#__PURE__*/_jsxDEV(RedirectToLogin, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 41\n  }, this);\n};\n_s(ProtectedRoute, \"en3ONi9t06tqTwML7pXDHFiRl9E=\", false, function () {\n  return [useNavigate];\n});\n_c = ProtectedRoute;\nconst RedirectToLogin = () => {\n  _s2();\n  useEffect(() => {\n    console.log('Redirecting to login...');\n    window.location.href = \"/login.html\";\n  }, []);\n  return null;\n};\n_s2(RedirectToLogin, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c2 = RedirectToLogin;\nexport default ProtectedRoute;\nvar _c, _c2;\n$RefreshReg$(_c, \"ProtectedRoute\");\n$RefreshReg$(_c2, \"RedirectToLogin\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useNavigate","UserContext","supabase","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","isAuthenticated","setIsAuthenticated","loading","setLoading","userId","setUserId","navigate","userData","setUserData","friends","setFriends","UserData","arraysAreEqual","arr1","arr2","length","i","checkSession","console","log","data","error","auth","getUser","user","id","fetchInitialData","dataPub","errorPub","from","select","eq","single","dataPriv","errorPriv","auth_id","first_name","last_name","avatar_url","status","username","contacts","initialContacts","updateFriendsList","userChannel","channel","on","event","schema","table","filter","payload","handleUserDataChange","subscribe","new","newContacts","updatedUserData","friendsChannels","map","prev","friend","removeChannel","forEach","currentFriendsIds","newFriendsIds","includes","removedFriends","some","removedFriend","in","fileName","_jsxFileName","lineNumber","columnNumber","RedirectToLogin","_c","_s2","window","location","href","_c2","$RefreshReg$"],"sources":["C:/Users/player/Documents/GitHub/synask-app/src/components/ProtectedRoute.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport UserContext from './UserContext';\r\nimport { supabase } from '../pages/config/SupabaseClient';\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [userId, setUserId] = useState(null);\r\n    const navigate = useNavigate();\r\n    const { userData, setUserData, friends, setFriends } = useContext(UserContext);\r\n    var UserData = {};\r\n\r\n    const arraysAreEqual = (arr1, arr2) => {\r\n      if (arr1.length !== arr2.length) {\r\n        return false;\r\n      }\r\n      for (let i = 0; i < arr1.length; i++) {\r\n        if (arr1[i] !== arr2[i]) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const checkSession = async () => {\r\n            console.log('Checking session...');\r\n            const { data, error } = await supabase.auth.getUser();\r\n            if (error) {\r\n                console.error('Error checking session:', error);\r\n                setIsAuthenticated(false);\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            if (data) {\r\n                console.log('User authenticated:', data.user.id);\r\n                setIsAuthenticated(true);\r\n                setUserId(data.user.id);\r\n            } else {\r\n                console.log('User not authenticated');\r\n                setIsAuthenticated(false);\r\n            }\r\n            setLoading(false);\r\n        };\r\n\r\n        checkSession();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!userId) return;\r\n\r\n        const fetchInitialData = async () => {\r\n            console.log('Fetching initial data...');\r\n            try {\r\n                const { data: dataPub, error: errorPub } = await supabase\r\n                    .from('users_public_information')\r\n                    .select('*')\r\n                    .eq('auth_id', userId)\r\n                    .single();\r\n\r\n                if (errorPub) throw errorPub;\r\n\r\n                console.log('Initial data fetched:', dataPub);\r\n\r\n                const { data: dataPriv, error: errorPriv } = await supabase\r\n                    .from('users_private_information')\r\n                    .select('*')\r\n                    .eq('auth_id', userId)\r\n                    .single();\r\n\r\n                if (errorPriv) throw errorPriv;\r\n\r\n                console.log('Initial data fetched:', dataPriv);\r\n\r\n                // Set user data\r\n                UserData = {\r\n                    auth_id: dataPub.auth_id,\r\n                    first_name: dataPub.first_name,\r\n                    last_name: dataPub.last_name,\r\n                    avatar_url: dataPub.avatar_url,\r\n                    status: dataPub.status,\r\n                    username: dataPub.username,\r\n                    contacts: dataPriv.contacts\r\n                };\r\n                setUserData(UserData);\r\n\r\n                // Extract contacts\r\n                const initialContacts = dataPriv.contacts || [];\r\n                console.log('Initial contacts:', initialContacts);\r\n                updateFriendsList(initialContacts);\r\n\r\n                // Subscribe to changes\r\n                const userChannel = supabase\r\n                  .channel(`user:${userId}`)\r\n                  .on(\r\n                    'postgres_changes',\r\n                    { event: 'UPDATE', schema: 'public', table: 'users_public_information', filter: `auth_id=eq.${userId}` },\r\n                    (payload) => {\r\n                      console.log('Public information change detected:', payload);\r\n                      handleUserDataChange(payload);\r\n                    }\r\n                  )\r\n                  .on(\r\n                    'postgres_changes',\r\n                    { event: 'UPDATE', schema: 'public', table: 'users_private_information', filter: `auth_id=eq.${userId}` },\r\n                    (payload) => {\r\n                      console.log('Private information change detected:', payload);\r\n                      handleUserDataChange(payload);\r\n                    }\r\n                  )\r\n                  .subscribe();\r\n\r\n                // Function to handle the update\r\n                function handleUserDataChange(payload) {\r\n                  console.log(payload.new.contacts, UserData.contacts);\r\n                  if (!arraysAreEqual(payload.new.contacts || [], UserData.contacts || [])) {\r\n                    const newContacts = payload.new.contacts || [];\r\n                    console.log('Contacts updated:', newContacts);\r\n                    console.log('UserData:', UserData);\r\n                    const updatedUserData = {\r\n                      ...UserData,\r\n                      contacts: newContacts\r\n                    };\r\n                    UserData = updatedUserData\r\n                    setUserData(updatedUserData);\r\n                    updateFriendsList(newContacts);\r\n                  } else {\r\n                    UserData = {\r\n                      auth_id: payload.new.auth_id,\r\n                      first_name: payload.new.first_name,\r\n                      last_name: payload.new.last_name,\r\n                      avatar_url: payload.new.avatar_url,\r\n                      status: payload.new.status,\r\n                      username: payload.new.username,\r\n                      contacts: payload.new.contacts,\r\n                    };\r\n                    setUserData(UserData);\r\n                  }\r\n                }\r\n\r\n\r\n                // Subscribe to changes for each contact\r\n                const friendsChannels = initialContacts.map(auth_id =>\r\n                    supabase\r\n                        .channel(`contact:${auth_id}`)\r\n                        .on('postgres_changes', { event: 'UPDATE', schema: 'public', table: 'users_public_information', filter: `auth_id=eq.${auth_id}` },\r\n                            (payload) => {\r\n                                console.log('Contact status change detected:', payload);\r\n                                setFriends(prev =>\r\n                                    prev.map(friend =>\r\n                                        friend.auth_id === payload.new.auth_id ? { ...friend, status: payload.new.status } : friend\r\n                                    )\r\n                                );\r\n                            }\r\n                        )\r\n                        .subscribe()\r\n                );\r\n\r\n                return () => {\r\n                    console.log('Removing user channel');\r\n                    supabase.removeChannel(userChannel);\r\n                    friendsChannels.forEach(channel => supabase.removeChannel(channel));\r\n                };\r\n            } catch (error) {\r\n                console.error('Error fetching initial data:', error);\r\n            }\r\n        };\r\n\r\n        const updateFriendsList = async (contacts) => {\r\n              console.log('Updating friends list...');\r\n              const currentFriendsIds = friends.map(friend => friend.auth_id);\r\n              const newFriendsIds = contacts.filter(auth_id => !currentFriendsIds.includes(auth_id));\r\n              const removedFriends = friends.filter(friend => !contacts.includes(friend.auth_id));\r\n\r\n              console.log('Removed friends:', removedFriends);\r\n              setFriends(prev => prev.filter(friend => !removedFriends.some(removedFriend => removedFriend.auth_id === friend.auth_id)));\r\n\r\n              if (newFriendsIds.length > 0) {\r\n                const { data, error } = await supabase\r\n                  .from('users_public_information')\r\n                  .select('auth_id, username, first_name, last_name, avatar_url, cover_url, status, tags')\r\n                  .in('auth_id', newFriendsIds);\r\n\r\n                if (error) {\r\n                  console.error('Error fetching new friends data:', error);\r\n                  return;\r\n                }\r\n\r\n                console.log('New friends data:', data);\r\n\r\n                setFriends(data);\r\n\r\n            }\r\n        };\r\n\r\n        fetchInitialData();\r\n    }, [userId]);\r\n\r\n    if (loading) return <div>Loading...</div>;\r\n\r\n    return isAuthenticated ? children : <RedirectToLogin />;\r\n};\r\n\r\nconst RedirectToLogin = () => {\r\n    useEffect(() => {\r\n        console.log('Redirecting to login...');\r\n        window.location.href = \"/login.html\";\r\n    }, []);\r\n    return null;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}