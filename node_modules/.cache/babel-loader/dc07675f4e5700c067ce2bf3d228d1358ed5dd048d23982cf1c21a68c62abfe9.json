{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\player\\\\Documents\\\\GitHub\\\\synask-app\\\\src\\\\pages\\\\music\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport SearchBar from './SearchBar';\nimport TrackList from './TrackList';\nimport styles from './App.module.css';\nimport { useTrack } from './TrackContext';\nimport AccentColorContext from '../settings/AccentColorContext';\nimport { supabase } from '../config/SupabaseClient'; // Инициализация Supabase клиента\nimport load from '../../pages/Loader.module.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [currentSection, setCurrentSection] = useState('allMusic');\n  const [searchTracks, setSearchTracks] = useState([]);\n  const [recommendedTracks, setRecommendedTracks] = useState([]);\n  const [myMusicIds, setMyMusicIds] = useState([]);\n  const [myMusicTracks, setMyMusicTracks] = useState([]);\n  const {\n    setTrack\n  } = useTrack();\n  const {\n    accentColor\n  } = useContext(AccentColorContext);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    // Загрузка рекомендованных треков\n    setIsLoading(true);\n    const fetchRecommendedTracks = async () => {\n      try {\n        const response = await axios.get(`https://www.googleapis.com/youtube/v3/search`, {\n          params: {\n            part: 'snippet',\n            q: 'music',\n            type: 'video',\n            videoCategoryId: '10',\n            maxResults: 15,\n            key: 'AIzaSyCNaJfGAy9a8LlB8B_A3jSRlNxpq4jsCAI' // Замените на ваш API ключ\n          }\n        });\n        setRecommendedTracks(response.data.items);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Error fetching data from YouTube API', error);\n      }\n    };\n    fetchRecommendedTracks();\n  }, []);\n  useEffect(() => {\n    if (currentSection === 'myMusic') {\n      // Загрузка идентификаторов треков из \"Моей музыки\"\n      const fetchMyMusicIds = async () => {\n        try {\n          // Получение пользователя\n          const {\n            data: {\n              user\n            }\n          } = await supabase.auth.getUser();\n          if (!user) {\n            console.error('User not found');\n            return;\n          }\n\n          // Получение идентификаторов треков из Supabase\n          const {\n            data,\n            error\n          } = await supabase.from('users_public_information').select('my_music').eq('auth_id', user.id).single();\n          if (error) {\n            console.error('Error fetching my music from Supabase:', error);\n            return;\n          }\n\n          // Установка идентификаторов треков в состояние\n          const trackIds = (data === null || data === void 0 ? void 0 : data.my_music) || [];\n          setMyMusicIds(trackIds);\n\n          // Загрузка полной информации о треках с YouTube\n          fetchTracksDetails(trackIds);\n        } catch (error) {\n          console.error('Error fetching my music', error);\n        }\n      };\n      fetchMyMusicIds();\n    }\n  }, [currentSection]);\n  const fetchTracksDetails = async trackIds => {\n    try {\n      const response = await axios.get(`https://www.googleapis.com/youtube/v3/videos`, {\n        params: {\n          part: 'snippet',\n          id: trackIds.join(','),\n          key: 'AIzaSyCNaJfGAy9a8LlB8B_A3jSRlNxpq4jsCAI' // Замените на ваш API ключ\n        }\n      });\n      setMyMusicTracks(response.data.items);\n    } catch (error) {\n      console.error('Error fetching track details from YouTube', error);\n    }\n  };\n  const handleSearch = async query => {\n    try {\n      const response = await axios.get(`https://www.googleapis.com/youtube/v3/search`, {\n        params: {\n          part: 'snippet',\n          q: query,\n          type: 'video',\n          videoCategoryId: '10',\n          maxResults: 15,\n          key: 'AIzaSyCNaJfGAy9a8LlB8B_A3jSRlNxpq4jsCAI' // Замените на ваш API ключ\n        }\n      });\n      setSearchTracks(response.data.items);\n    } catch (error) {\n      console.error('Error fetching search results', error);\n    }\n  };\n  const handlePlay = (index, isSearch, isMyMusic) => {\n    let track;\n    if (isMyMusic) {\n      track = myMusicTracks[index];\n    } else {\n      track = isSearch ? searchTracks[index] : recommendedTracks[index];\n    }\n    if (track) {\n      const videoId = track.id.videoId || track.id;\n      const title = track.snippet.title;\n      const artist = track.snippet.channelTitle;\n      setTrack({\n        videoId,\n        title,\n        artist\n      });\n    }\n  };\n  const handleAddToMyMusic = async track => {\n    try {\n      // Получение пользователя\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (!user) {\n        console.error('User not found');\n        return;\n      }\n\n      // Получение текущих идентификаторов треков \"Моей музыки\"\n      const {\n        data,\n        error\n      } = await supabase.from('users_public_information').select('my_music').eq('auth_id', user.id).single();\n      if (error) {\n        console.error('Error fetching my music from Supabase:', error);\n        return;\n      }\n      const currentMusicIds = (data === null || data === void 0 ? void 0 : data.my_music) || [];\n      const videoId = track.id.videoId || track.id;\n      const trackExists = currentMusicIds.includes(videoId);\n      if (trackExists) {\n        console.warn('Track already exists in \"My Music\"');\n        return;\n      }\n\n      // Добавление нового идентификатора трека\n      const updatedMusicIds = [...currentMusicIds, videoId];\n\n      // Обновление записи в Supabase\n      const {\n        error: updateError\n      } = await supabase.from('users_public_information').update({\n        my_music: updatedMusicIds\n      }).eq('auth_id', user.id);\n      if (updateError) {\n        console.error('Error updating my music in Supabase:', updateError);\n      } else {\n        setMyMusicIds(updatedMusicIds);\n        fetchTracksDetails(updatedMusicIds);\n      }\n    } catch (error) {\n      console.error('Error adding track to my music', error);\n    }\n  };\n  const handleRemoveFromMyMusic = async videoId => {\n    try {\n      // Получение пользователя\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      if (!user) {\n        console.error('User not found');\n        return;\n      }\n\n      // Получение текущих идентификаторов треков \"Моей музыки\"\n      const {\n        data,\n        error\n      } = await supabase.from('users_public_information').select('my_music').eq('auth_id', user.id).single();\n      if (error) {\n        console.error('Error fetching my music from Supabase:', error);\n        return;\n      }\n      const currentMusicIds = (data === null || data === void 0 ? void 0 : data.my_music) || [];\n      const updatedMusicIds = currentMusicIds.filter(id => id !== videoId);\n\n      // Обновление записи в Supabase\n      const {\n        error: updateError\n      } = await supabase.from('users_public_information').update({\n        my_music: updatedMusicIds\n      }).eq('auth_id', user.id);\n      if (updateError) {\n        console.error('Error updating my music in Supabase:', updateError);\n      } else {\n        setMyMusicIds(updatedMusicIds);\n        fetchTracksDetails(updatedMusicIds);\n      }\n    } catch (error) {\n      console.error('Error removing track from my music', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.App,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.sectionSwitch,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${styles.button} ${currentSection === 'allMusic' ? styles.activeButton : ''}`,\n        onClick: () => setCurrentSection('allMusic'),\n        children: \"\\u0412\\u0441\\u044F \\u043C\\u0443\\u0437\\u044B\\u043A\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `${styles.button} ${currentSection === 'myMusic' ? styles.activeButton : ''}`,\n        onClick: () => setCurrentSection('myMusic'),\n        children: \"\\u041C\\u043E\\u044F \\u043C\\u0443\\u0437\\u044B\\u043A\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this), currentSection === 'allMusic' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        onSearch: handleSearch,\n        placeholder: \"\\u041F\\u043E\\u0438\\u0441\\u043A \\u043F\\u043E \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u044E \\u0442\\u0440\\u0435\\u043A\\u0430 \\u0438\\u043B\\u0438 \\u0430\\u0440\\u0442\\u0438\\u0441\\u0442\\u0443\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(TrackList, {\n        tracks: searchTracks,\n        onPlay: index => handlePlay(index, true, false),\n        title: \"\\u0420\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442\\u044B \\u043F\\u043E\\u0438\\u0441\\u043A\\u0430\",\n        isSearchResults: true,\n        onAddToMyMusic: handleAddToMyMusic\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 21\n      }, this), isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: load.spinner,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(TrackList, {\n        tracks: recommendedTracks,\n        onPlay: index => handlePlay(index, false, false),\n        title: \"\\u0420\\u0435\\u043A\\u043E\\u043C\\u0435\\u043D\\u0434\\u0430\\u0446\\u0438\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), currentSection === 'myMusic' && /*#__PURE__*/_jsxDEV(TrackList, {\n      tracks: myMusicTracks,\n      title: \"\\u041C\\u043E\\u044F \\u043C\\u0443\\u0437\\u044B\\u043A\\u0430\",\n      onPlay: index => handlePlay(index, false, true),\n      onRemoveFromMyMusic: handleRemoveFromMyMusic,\n      isMyMusic: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"FDibY2vcuJf6Qk4pSv/re8gQ1Qg=\", false, function () {\n  return [useTrack];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useContext","axios","SearchBar","TrackList","styles","useTrack","AccentColorContext","supabase","load","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentSection","setCurrentSection","searchTracks","setSearchTracks","recommendedTracks","setRecommendedTracks","myMusicIds","setMyMusicIds","myMusicTracks","setMyMusicTracks","setTrack","accentColor","isLoading","setIsLoading","fetchRecommendedTracks","response","get","params","part","q","type","videoCategoryId","maxResults","key","data","items","error","console","fetchMyMusicIds","user","auth","getUser","from","select","eq","id","single","trackIds","my_music","fetchTracksDetails","join","handleSearch","query","handlePlay","index","isSearch","isMyMusic","track","videoId","title","snippet","artist","channelTitle","handleAddToMyMusic","currentMusicIds","trackExists","includes","warn","updatedMusicIds","updateError","update","handleRemoveFromMyMusic","filter","className","children","sectionSwitch","button","activeButton","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","placeholder","tracks","onPlay","isSearchResults","onAddToMyMusic","spinner","onRemoveFromMyMusic","_c","$RefreshReg$"],"sources":["C:/Users/player/Documents/GitHub/synask-app/src/pages/music/App.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport SearchBar from './SearchBar';\r\nimport TrackList from './TrackList';\r\nimport styles from './App.module.css';\r\nimport { useTrack } from './TrackContext';\r\nimport AccentColorContext from '../settings/AccentColorContext';\r\nimport { supabase } from '../config/SupabaseClient'; // Инициализация Supabase клиента\r\nimport load from '../../pages/Loader.module.css';\r\n\r\nconst App = () => {\r\n    const [currentSection, setCurrentSection] = useState('allMusic');\r\n    const [searchTracks, setSearchTracks] = useState([]);\r\n    const [recommendedTracks, setRecommendedTracks] = useState([]);\r\n    const [myMusicIds, setMyMusicIds] = useState([]);\r\n    const [myMusicTracks, setMyMusicTracks] = useState([]);\r\n    const { setTrack } = useTrack();\r\n    const { accentColor } = useContext(AccentColorContext);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // Загрузка рекомендованных треков\r\n        setIsLoading(true);\r\n        const fetchRecommendedTracks = async () => {\r\n            try {\r\n                const response = await axios.get(`https://www.googleapis.com/youtube/v3/search`, {\r\n                    params: {\r\n                        part: 'snippet',\r\n                        q: 'music',\r\n                        type: 'video',\r\n                        videoCategoryId: '10',\r\n                        maxResults: 15,\r\n                        key: 'AIzaSyCNaJfGAy9a8LlB8B_A3jSRlNxpq4jsCAI' // Замените на ваш API ключ\r\n                    }\r\n                });\r\n                setRecommendedTracks(response.data.items);\r\n                setIsLoading(false);\r\n            } catch (error) {\r\n                console.error('Error fetching data from YouTube API', error);\r\n            }\r\n        };\r\n\r\n        fetchRecommendedTracks();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (currentSection === 'myMusic') {\r\n            // Загрузка идентификаторов треков из \"Моей музыки\"\r\n            const fetchMyMusicIds = async () => {\r\n                try {\r\n                    // Получение пользователя\r\n                    const { data: { user } } = await supabase.auth.getUser();\r\n                    if (!user) {\r\n                        console.error('User not found');\r\n                        return;\r\n                    }\r\n\r\n                    // Получение идентификаторов треков из Supabase\r\n                    const { data, error } = await supabase\r\n                        .from('users_public_information')\r\n                        .select('my_music')\r\n                        .eq('auth_id', user.id)\r\n                        .single();\r\n\r\n                    if (error) {\r\n                        console.error('Error fetching my music from Supabase:', error);\r\n                        return;\r\n                    }\r\n\r\n                    // Установка идентификаторов треков в состояние\r\n                    const trackIds = data?.my_music || [];\r\n                    setMyMusicIds(trackIds);\r\n\r\n                    // Загрузка полной информации о треках с YouTube\r\n                    fetchTracksDetails(trackIds);\r\n                } catch (error) {\r\n                    console.error('Error fetching my music', error);\r\n                }\r\n            };\r\n\r\n            fetchMyMusicIds();\r\n        }\r\n    }, [currentSection]);\r\n\r\n    const fetchTracksDetails = async (trackIds) => {\r\n        try {\r\n            const response = await axios.get(`https://www.googleapis.com/youtube/v3/videos`, {\r\n                params: {\r\n                    part: 'snippet',\r\n                    id: trackIds.join(','),\r\n                    key: 'AIzaSyCNaJfGAy9a8LlB8B_A3jSRlNxpq4jsCAI' // Замените на ваш API ключ\r\n                }\r\n            });\r\n            setMyMusicTracks(response.data.items);\r\n        } catch (error) {\r\n            console.error('Error fetching track details from YouTube', error);\r\n        }\r\n    };\r\n\r\n    const handleSearch = async (query) => {\r\n        try {\r\n            const response = await axios.get(`https://www.googleapis.com/youtube/v3/search`, {\r\n                params: {\r\n                    part: 'snippet',\r\n                    q: query,\r\n                    type: 'video',\r\n                    videoCategoryId: '10',\r\n                    maxResults: 15,\r\n                    key: 'AIzaSyCNaJfGAy9a8LlB8B_A3jSRlNxpq4jsCAI' // Замените на ваш API ключ\r\n                }\r\n            });\r\n            setSearchTracks(response.data.items);\r\n        } catch (error) {\r\n            console.error('Error fetching search results', error);\r\n        }\r\n    };\r\n\r\n    const handlePlay = (index, isSearch, isMyMusic) => {\r\n        let track;\r\n        if (isMyMusic) {\r\n            track = myMusicTracks[index];\r\n        } else {\r\n            track = isSearch ? searchTracks[index] : recommendedTracks[index];\r\n        }\r\n\r\n        if (track) {\r\n            const videoId = track.id.videoId || track.id;\r\n            const title = track.snippet.title;\r\n            const artist = track.snippet.channelTitle;\r\n            setTrack({ videoId, title, artist });\r\n        }\r\n    };\r\n\r\n    const handleAddToMyMusic = async (track) => {\r\n        try {\r\n            // Получение пользователя\r\n            const { data: { user } } = await supabase.auth.getUser();\r\n            if (!user) {\r\n                console.error('User not found');\r\n                return;\r\n            }\r\n\r\n            // Получение текущих идентификаторов треков \"Моей музыки\"\r\n            const { data, error } = await supabase\r\n                .from('users_public_information')\r\n                .select('my_music')\r\n                .eq('auth_id', user.id)\r\n                .single();\r\n\r\n            if (error) {\r\n                console.error('Error fetching my music from Supabase:', error);\r\n                return;\r\n            }\r\n\r\n            const currentMusicIds = data?.my_music || [];\r\n            const videoId = track.id.videoId || track.id;\r\n            const trackExists = currentMusicIds.includes(videoId);\r\n\r\n            if (trackExists) {\r\n                console.warn('Track already exists in \"My Music\"');\r\n                return;\r\n            }\r\n\r\n            // Добавление нового идентификатора трека\r\n            const updatedMusicIds = [...currentMusicIds, videoId];\r\n\r\n            // Обновление записи в Supabase\r\n            const { error: updateError } = await supabase\r\n                .from('users_public_information')\r\n                .update({ my_music: updatedMusicIds })\r\n                .eq('auth_id', user.id);\r\n\r\n            if (updateError) {\r\n                console.error('Error updating my music in Supabase:', updateError);\r\n            } else {\r\n                setMyMusicIds(updatedMusicIds);\r\n                fetchTracksDetails(updatedMusicIds);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error adding track to my music', error);\r\n        }\r\n    };\r\n\r\n    const handleRemoveFromMyMusic = async (videoId) => {\r\n        try {\r\n            // Получение пользователя\r\n            const { data: { user } } = await supabase.auth.getUser();\r\n            if (!user) {\r\n                console.error('User not found');\r\n                return;\r\n            }\r\n\r\n            // Получение текущих идентификаторов треков \"Моей музыки\"\r\n            const { data, error } = await supabase\r\n                .from('users_public_information')\r\n                .select('my_music')\r\n                .eq('auth_id', user.id)\r\n                .single();\r\n\r\n            if (error) {\r\n                console.error('Error fetching my music from Supabase:', error);\r\n                return;\r\n            }\r\n\r\n            const currentMusicIds = data?.my_music || [];\r\n            const updatedMusicIds = currentMusicIds.filter(id => id !== videoId);\r\n\r\n            // Обновление записи в Supabase\r\n            const { error: updateError } = await supabase\r\n                .from('users_public_information')\r\n                .update({ my_music: updatedMusicIds })\r\n                .eq('auth_id', user.id);\r\n\r\n            if (updateError) {\r\n                console.error('Error updating my music in Supabase:', updateError);\r\n            } else {\r\n                setMyMusicIds(updatedMusicIds);\r\n                fetchTracksDetails(updatedMusicIds);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error removing track from my music', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={styles.App}>\r\n            <div className={styles.sectionSwitch}>\r\n                <button\r\n                    className={`${styles.button} ${currentSection === 'allMusic' ? styles.activeButton : ''}`}\r\n                    onClick={() => setCurrentSection('allMusic')}\r\n                >\r\n                    Вся музыка\r\n                </button>\r\n                <button\r\n                    className={`${styles.button} ${currentSection === 'myMusic' ? styles.activeButton : ''}`}\r\n                    onClick={() => setCurrentSection('myMusic')}\r\n                >\r\n                    Моя музыка\r\n                </button>\r\n            </div>\r\n\r\n            {currentSection === 'allMusic' && (\r\n                <>\r\n                    <SearchBar onSearch={handleSearch} placeholder=\"Поиск по названию трека или артисту\" />\r\n                    <TrackList\r\n                        tracks={searchTracks}\r\n                        onPlay={(index) => handlePlay(index, true, false)}\r\n                        title=\"Результаты поиска\"\r\n                        isSearchResults\r\n                        onAddToMyMusic={handleAddToMyMusic}\r\n                    />\r\n                    {isLoading ? (\r\n                        <div className={load.spinner}>\r\n                          <div></div>\r\n                          <div></div>\r\n                          <div></div>\r\n                        </div>\r\n                    ) : (\r\n                    <TrackList\r\n                        tracks={recommendedTracks}\r\n                        onPlay={(index) => handlePlay(index, false, false)}\r\n                        title=\"Рекомендации\"\r\n                    />\r\n                    )}\r\n                </>\r\n            )}\r\n\r\n            {currentSection === 'myMusic' && (\r\n                <TrackList\r\n                    tracks={myMusicTracks}\r\n                    title=\"Моя музыка\"\r\n                    onPlay={(index) => handlePlay(index, false, true)}\r\n                    onRemoveFromMyMusic={handleRemoveFromMyMusic}\r\n                    isMyMusic\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}