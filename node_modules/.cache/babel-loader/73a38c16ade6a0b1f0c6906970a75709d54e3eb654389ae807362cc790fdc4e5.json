{"ast":null,"code":"import React,{useState,useContext,useEffect,useRef}from'react';import{useNavigate}from'react-router-dom';import UserContext from'./UserContext';import getSupabaseClient from'../pages/config/SupabaseClient';import load from'../pages/Loader.module.css';import RedirectToLogin from'./RedirectToLogin';import NetworkStatusHandler from'./NetworkStatusHandler';import MessageHandler from'./MessageHandler';// Импортируем компонент мессенджера\nimport{checkSession,fetchInitialData,subscribeToUserDataChanges}from'./utils';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const supabase=getSupabaseClient();const ProtectedRoute=_ref=>{let{children}=_ref;const[loading,setLoading]=useState(true);const navigate=useNavigate();const{userData,setUserData,setFriends,userId,setUserId,isAuthenticated,setIsAuthenticated}=useContext(UserContext);const messengerInitialized=useRef(false);// Флаг для отслеживания инициализации мессенджера\nuseEffect(()=>{// Проверка сессии пользователя\nconst initializeSession=async()=>{const{authenticated,userId}=await checkSession(supabase,navigate);if(authenticated){console.log('User is authenticated');setIsAuthenticated(authenticated);setUserId(userId);}else{console.log('User is not authenticated');setIsAuthenticated(false);window.location.href=\"/login.html\";}};initializeSession();},[]);// Данный эффект должен запускаться один раз при монтировании компонента\nuseEffect(()=>{if(!userId)return;// Загрузка данных пользователя и подписка на обновления\nconst initializeUserData=async()=>{const userChannel=await fetchInitialData(supabase,userId,setUserData,setFriends);const unsubscribe=subscribeToUserDataChanges(supabase,userId,setUserData,setFriends);setLoading(false);return()=>{if(userChannel){supabase.removeChannel(userChannel);}if(unsubscribe){unsubscribe();}};};const cleanup=initializeUserData();// Cleanup при размонтировании компонента или изменении userId\nreturn()=>{if(cleanup&&typeof cleanup==='function'){cleanup();}};},[userId,setUserData,setFriends]);// Эффект для инициализации компонента мессенджера\nuseEffect(()=>{if(isAuthenticated&&!messengerInitialized.current){// Проверяем, прошел ли пользователь аутентификацию и не был ли мессенджер уже инициализирован\nmessengerInitialized.current=true;// Помечаем, что мессенджер инициализирован\n}},[isAuthenticated]);if(loading)return/*#__PURE__*/_jsx(LoadingSpinner,{});return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(NetworkStatusHandler,{}),isAuthenticated?/*#__PURE__*/_jsxs(_Fragment,{children:[messengerInitialized.current&&/*#__PURE__*/_jsx(MessageHandler,{}),\" \",children]}):/*#__PURE__*/_jsx(RedirectToLogin,{})]});};const LoadingSpinner=()=>/*#__PURE__*/_jsxs(\"div\",{className:load.spinner,children:[/*#__PURE__*/_jsx(\"div\",{}),/*#__PURE__*/_jsx(\"div\",{}),/*#__PURE__*/_jsx(\"div\",{})]});export default ProtectedRoute;","map":{"version":3,"names":["React","useState","useContext","useEffect","useRef","useNavigate","UserContext","getSupabaseClient","load","RedirectToLogin","NetworkStatusHandler","MessageHandler","checkSession","fetchInitialData","subscribeToUserDataChanges","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","supabase","ProtectedRoute","_ref","children","loading","setLoading","navigate","userData","setUserData","setFriends","userId","setUserId","isAuthenticated","setIsAuthenticated","messengerInitialized","initializeSession","authenticated","console","log","window","location","href","initializeUserData","userChannel","unsubscribe","removeChannel","cleanup","current","LoadingSpinner","className","spinner"],"sources":["C:/Users/player/Documents/GitHub/synask-app/src/components/ProtectedRoute.js"],"sourcesContent":["import React, { useState, useContext, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport UserContext from './UserContext';\r\nimport getSupabaseClient from '../pages/config/SupabaseClient';\r\nimport load from '../pages/Loader.module.css';\r\nimport RedirectToLogin from './RedirectToLogin';\r\nimport NetworkStatusHandler from './NetworkStatusHandler';\r\nimport MessageHandler from './MessageHandler'; // Импортируем компонент мессенджера\r\nimport { checkSession, fetchInitialData, subscribeToUserDataChanges } from './utils';\r\n\r\nconst supabase = getSupabaseClient();\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const navigate = useNavigate();\r\n  const { userData, setUserData, setFriends, userId, setUserId, isAuthenticated, setIsAuthenticated } = useContext(UserContext);\r\n\r\n  const messengerInitialized = useRef(false); // Флаг для отслеживания инициализации мессенджера\r\n\r\n  useEffect(() => {\r\n    // Проверка сессии пользователя\r\n    const initializeSession = async () => {\r\n      const { authenticated, userId } = await checkSession(supabase, navigate);\r\n      if (authenticated) {\r\n          console.log('User is authenticated');\r\n          setIsAuthenticated(authenticated);\r\n          setUserId(userId);\r\n      } else {\r\n          console.log('User is not authenticated');\r\n          setIsAuthenticated(false);\r\n          window.location.href = \"/login.html\";\r\n      }\r\n    };\r\n\r\n    initializeSession();\r\n  }, []); // Данный эффект должен запускаться один раз при монтировании компонента\r\n\r\n  useEffect(() => {\r\n    if (!userId) return;\r\n\r\n    // Загрузка данных пользователя и подписка на обновления\r\n    const initializeUserData = async () => {\r\n      const userChannel = await fetchInitialData(supabase, userId, setUserData, setFriends);\r\n      const unsubscribe = subscribeToUserDataChanges(supabase, userId, setUserData, setFriends);\r\n      setLoading(false);\r\n\r\n      return () => {\r\n        if (userChannel) {\r\n          supabase.removeChannel(userChannel);\r\n        }\r\n        if (unsubscribe) {\r\n          unsubscribe();\r\n        }\r\n      };\r\n    };\r\n\r\n    const cleanup = initializeUserData();\r\n\r\n    // Cleanup при размонтировании компонента или изменении userId\r\n    return () => {\r\n      if (cleanup && typeof cleanup === 'function') {\r\n        cleanup();\r\n      }\r\n    };\r\n  }, [userId, setUserData, setFriends]);\r\n\r\n  // Эффект для инициализации компонента мессенджера\r\n  useEffect(() => {\r\n    if (isAuthenticated && !messengerInitialized.current) {\r\n      // Проверяем, прошел ли пользователь аутентификацию и не был ли мессенджер уже инициализирован\r\n      messengerInitialized.current = true; // Помечаем, что мессенджер инициализирован\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  if (loading) return <LoadingSpinner />;\r\n\r\n  return (\r\n    <>\r\n      <NetworkStatusHandler />\r\n      {isAuthenticated ? (\r\n        <>\r\n          {messengerInitialized.current && <MessageHandler />} {/* Инициализируем мессенджер, если пользователь аутентифицирован */}\r\n          {children}\r\n        </>\r\n      ) : (\r\n        <RedirectToLogin />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst LoadingSpinner = () => (\r\n  <div className={load.spinner}>\r\n    <div></div>\r\n    <div></div>\r\n    <div></div>\r\n  </div>\r\n);\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}