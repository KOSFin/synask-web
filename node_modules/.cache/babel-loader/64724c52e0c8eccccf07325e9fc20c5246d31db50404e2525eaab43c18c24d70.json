{"ast":null,"code":"import React,{useState,useEffect}from'react';import styles from'./NetworkStatusHandler.module.css';// Функция для проверки статуса сети\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const checkNetworkStatus=()=>{return navigator.onLine;};// Компонент для отображения статуса сети\nconst NetworkStatusHandler=()=>{const[isOnline,setIsOnline]=useState(checkNetworkStatus());useEffect(()=>{const updateOnlineStatus=()=>{setIsOnline(checkNetworkStatus());};window.addEventListener('online',updateOnlineStatus);window.addEventListener('offline',updateOnlineStatus);return()=>{window.removeEventListener('online',updateOnlineStatus);window.removeEventListener('offline',updateOnlineStatus);};},[]);// Рендер компонента в зависимости от статуса сети\nif(!isOnline){return/*#__PURE__*/_jsx(\"div\",{className:styles.overlay,children:/*#__PURE__*/_jsxs(\"div\",{className:styles.messageContainer,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.messageTitle,children:\"\\u041D\\u0435\\u0442 \\u043F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D\\u0438\\u044F \\u043A \\u0438\\u043D\\u0442\\u0435\\u0440\\u043D\\u0435\\u0442\\u0443\"}),/*#__PURE__*/_jsx(\"div\",{className:styles.messageBody,children:\"\\u0421\\u043E\\u0435\\u0434\\u0438\\u043D\\u0435\\u043D\\u0438\\u0435 \\u0441 \\u0438\\u043D\\u0442\\u0435\\u0440\\u043D\\u0435\\u0442\\u043E\\u043C \\u043F\\u043E\\u0442\\u0435\\u0440\\u044F\\u043D\\u043E. \\u041F\\u043E\\u0436\\u0430\\u043B\\u0443\\u0439\\u0441\\u0442\\u0430, \\u043F\\u043E\\u0434\\u043E\\u0436\\u0434\\u0438\\u0442\\u0435...\"}),/*#__PURE__*/_jsx(\"div\",{className:styles.autoReconnect,children:\"\\u041F\\u043E\\u0434\\u043A\\u043B\\u044E\\u0447\\u0435\\u043D\\u0438\\u0435 \\u0432\\u043E\\u0441\\u0441\\u0442\\u0430\\u043D\\u043E\\u0432\\u0438\\u0442\\u0441\\u044F \\u0430\\u0432\\u0442\\u043E\\u043C\\u0430\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u0438 \\u043F\\u0440\\u0438 \\u043F\\u043E\\u044F\\u0432\\u043B\\u0435\\u043D\\u0438\\u0438 \\u0441\\u0435\\u0442\\u0438.\"})]})});}// Если интернет есть, компонент ничего не рендерит\nreturn null;};export default NetworkStatusHandler;","map":{"version":3,"names":["React","useState","useEffect","styles","jsx","_jsx","jsxs","_jsxs","checkNetworkStatus","navigator","onLine","NetworkStatusHandler","isOnline","setIsOnline","updateOnlineStatus","window","addEventListener","removeEventListener","className","overlay","children","messageContainer","messageTitle","messageBody","autoReconnect"],"sources":["C:/Users/player/Documents/GitHub/synask-app/src/components/NetworkStatusHandler.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styles from './NetworkStatusHandler.module.css';\r\n\r\n// Функция для проверки статуса сети\r\nexport const checkNetworkStatus = () => {\r\n    return navigator.onLine;\r\n};\r\n\r\n// Компонент для отображения статуса сети\r\nconst NetworkStatusHandler = () => {\r\n    const [isOnline, setIsOnline] = useState(checkNetworkStatus());\r\n\r\n    useEffect(() => {\r\n        const updateOnlineStatus = () => {\r\n            setIsOnline(checkNetworkStatus());\r\n        };\r\n\r\n        window.addEventListener('online', updateOnlineStatus);\r\n        window.addEventListener('offline', updateOnlineStatus);\r\n\r\n        return () => {\r\n            window.removeEventListener('online', updateOnlineStatus);\r\n            window.removeEventListener('offline', updateOnlineStatus);\r\n        };\r\n    }, []);\r\n\r\n    // Рендер компонента в зависимости от статуса сети\r\n    if (!isOnline) {\r\n        return (\r\n            <div className={styles.overlay}>\r\n                <div className={styles.messageContainer}>\r\n                    <div className={styles.messageTitle}>Нет подключения к интернету</div>\r\n                    <div className={styles.messageBody}>\r\n                        Соединение с интернетом потеряно. Пожалуйста, подождите...\r\n                    </div>\r\n                    <div className={styles.autoReconnect}>\r\n                        Подключение восстановится автоматически при появлении сети.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Если интернет есть, компонент ничего не рендерит\r\n    return null;\r\n};\r\n\r\nexport default NetworkStatusHandler;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,MAAO,CAAAC,MAAM,KAAM,mCAAmC,CAEtD;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,MAAO,MAAM,CAAAC,kBAAkB,CAAGA,CAAA,GAAM,CACpC,MAAO,CAAAC,SAAS,CAACC,MAAM,CAC3B,CAAC,CAED;AACA,KAAM,CAAAC,oBAAoB,CAAGA,CAAA,GAAM,CAC/B,KAAM,CAACC,QAAQ,CAAEC,WAAW,CAAC,CAAGZ,QAAQ,CAACO,kBAAkB,CAAC,CAAC,CAAC,CAE9DN,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAY,kBAAkB,CAAGA,CAAA,GAAM,CAC7BD,WAAW,CAACL,kBAAkB,CAAC,CAAC,CAAC,CACrC,CAAC,CAEDO,MAAM,CAACC,gBAAgB,CAAC,QAAQ,CAAEF,kBAAkB,CAAC,CACrDC,MAAM,CAACC,gBAAgB,CAAC,SAAS,CAAEF,kBAAkB,CAAC,CAEtD,MAAO,IAAM,CACTC,MAAM,CAACE,mBAAmB,CAAC,QAAQ,CAAEH,kBAAkB,CAAC,CACxDC,MAAM,CAACE,mBAAmB,CAAC,SAAS,CAAEH,kBAAkB,CAAC,CAC7D,CAAC,CACL,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,GAAI,CAACF,QAAQ,CAAE,CACX,mBACIP,IAAA,QAAKa,SAAS,CAAEf,MAAM,CAACgB,OAAQ,CAAAC,QAAA,cAC3Bb,KAAA,QAAKW,SAAS,CAAEf,MAAM,CAACkB,gBAAiB,CAAAD,QAAA,eACpCf,IAAA,QAAKa,SAAS,CAAEf,MAAM,CAACmB,YAAa,CAAAF,QAAA,CAAC,qJAA2B,CAAK,CAAC,cACtEf,IAAA,QAAKa,SAAS,CAAEf,MAAM,CAACoB,WAAY,CAAAH,QAAA,CAAC,4SAEpC,CAAK,CAAC,cACNf,IAAA,QAAKa,SAAS,CAAEf,MAAM,CAACqB,aAAc,CAAAJ,QAAA,CAAC,sUAEtC,CAAK,CAAC,EACL,CAAC,CACL,CAAC,CAEd,CAEA;AACA,MAAO,KAAI,CACf,CAAC,CAED,cAAe,CAAAT,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}