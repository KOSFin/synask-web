{"ast":null,"code":"import React,{useState,useEffect,useContext}from'react';import UserContext from'./UserContext';import ChatContext from'./ChatContext';import getSupabaseClient from'../pages/config/SupabaseClient';const supabase=getSupabaseClient();const CACHE_PREFIX='chat-app-cache-v1';export const MessageHandler=()=>{const{chatList,setChatList,messages,setMessages,selectedChatId,isLoadingChats,setIsLoadingChats,isLoadingMessages,setIsLoadingMessages,newMessagesCount,setNewMessagesCount,isPageVisible,setIsPageVisible,selectedChat,setSelectedChat,messageStatus,setMessageStatus,pendingQueue,setPendingQueue}=useContext(ChatContext);const{isAuthenticated,userId,usersCache,setUsersCache}=useContext(UserContext);const[messagesCache,setMessagesCache]=useState({});const[chatsCache,setChatsCache]=useState([]);useEffect(()=>{if(!isAuthenticated)return;setIsLoadingChats(true);const initializeChats=async()=>{if(chatsCache.length>0){setChatList(chatsCache);setIsLoadingChats(false);return;}const cachedChats=getCachedChats();if(cachedChats.length>0){setChatList(cachedChats);setIsLoadingChats(false);setChatsCache(cachedChats);}const fetchedChats=await fetchChatsFromDB();const enrichedChats=await Promise.all(fetchedChats.map(async chat=>{if(!chat.is_group){chat.membersInfo=await enrichMemberData(chat.members);}return chat;}));setChatList(enrichedChats);setIsLoadingChats(false);setChatsCache(enrichedChats);saveChatsToCache(enrichedChats);updateNewMessagesCount(fetchedChats);};initializeChats();const chatSubscription=supabase.channel(\"chats:\".concat(userId)).on('postgres_changes',{event:'INSERT',schema:'public',table:'chats'},payload=>handleChatInsert(payload.new)).on('postgres_changes',{event:'UPDATE',schema:'public',table:'chats'},payload=>handleChatUpdate(payload.new)).on('postgres_changes',{event:'DELETE',schema:'public',table:'chats'},payload=>handleChatDelete(payload.old)).subscribe();const messageSubscription=supabase.channel(\"messages:\".concat(userId)).on('postgres_changes',{event:'INSERT',schema:'public',table:'messages'},payload=>handleMessageInsert(payload.new)).on('postgres_changes',{event:'UPDATE',schema:'public',table:'messages'},payload=>handleMessageUpdate(payload.new)).on('postgres_changes',{event:'DELETE',schema:'public',table:'messages'},payload=>handleMessageDelete(payload.old)).subscribe();return()=>{supabase.removeChannel(chatSubscription);supabase.removeChannel(messageSubscription);};},[isAuthenticated]);const enrichMemberData=async memberIds=>{// Проверка в кэше\nconst missingMemberIds=memberIds.filter(id=>!usersCache[id]);if(missingMemberIds.length===0){return memberIds.map(id=>usersCache[id]);}// Получение недостающих пользователей из базы данных\nconst{data:newMembers,error:memberError}=await supabase.from('users_public_information').select('username, first_name, last_name, avatar_url, cover_url, status, auth_id').in('auth_id',missingMemberIds);if(memberError){console.error(memberError);return[];}// Обновление кэша\nconst updatedCache={...usersCache};newMembers.forEach(user=>{updatedCache[user.auth_id]=user;});setUsersCache(updatedCache);return memberIds.map(id=>updatedCache[id]);};useEffect(()=>{if(!selectedChatId)return;const fetchSelectedChat=async()=>{// 1. Проверяем, не совпадает ли selectedChatId с userId\nif(selectedChatId===userId){setSelectedChat({error:'Указанное айди совпадает с айди пользователя'});return;}// 2. Проверяем в состоянии, существует ли чат с таким selectedChatId\nconst chatFromState=chatList.find(chat=>chat.id===selectedChatId);if(chatFromState){setSelectedChat(chatFromState);return;}// 3. Проверяем кеш чатов в локальном хранилище\nconst cachedChats=getCachedChats();const chatFromCache=cachedChats.find(chat=>chat.id===selectedChatId);if(chatFromCache){setSelectedChat(chatFromCache);}// 4. Если чата с таким selectedChatId не существует, ищем чат, где userId является членом\nconst chatWithUser=chatList.find(chat=>chat.members.includes(selectedChatId)&&chat.is_group===false);if(chatWithUser){setSelectedChat(chatWithUser);}// 5. Если не найдено чатов, проверяем в базе данных пользователей\nconst{data:userInfo,error:userError}=await supabase.from('users_public_information').select('username, first_name, last_name, avatar_url, cover_url, status, auth_id').eq('auth_id',selectedChatId).single();if(userError||!userInfo){setSelectedChat({error:'Диалога по указанному айди не существует или пользователь был удалён'});}else{// Создаём новый чат с участником, если чат не найден\nsetSelectedChat({membersInfo:[userInfo,{auth_id:userId}],// Добавляем информацию о текущем пользователе\nchatExists:false});}};// Вызываем сначала функцию поиска или создания чата\nfetchSelectedChat();},[selectedChatId,chatList]);// Теперь загружаем сообщения только после установки selectedChat\nuseEffect(()=>{if(!selectedChat.id||selectedChat.error)return;setIsLoadingMessages(true);const fetchMessages=async()=>{// Проверяем кеш сообщений\nif(messagesCache[selectedChat.id]){setMessages(messagesCache[selectedChat.id]);setIsLoadingMessages(false);return;}// Проверяем кеш сообщений в локальном хранилище\nconst cachedMessages=getCachedMessages(selectedChat.id);if(cachedMessages.length>0){setMessages(cachedMessages);setIsLoadingMessages(false);}// Если в кеше нет сообщений, загружаем из базы данных\nconst fetchedMessages=await fetchMessagesFromDB(selectedChat.id);setMessages(fetchedMessages);setMessagesCache(prevCache=>({...prevCache,[selectedChat.id]:fetchedMessages}));setIsLoadingMessages(false);saveMessagesToCache(selectedChat.id,fetchedMessages);};fetchMessages();},[selectedChat]);const getCachedChats=()=>{const cachedChats=localStorage.getItem(\"\".concat(CACHE_PREFIX,\"-chats\"));return cachedChats?JSON.parse(cachedChats):[];};const getCachedMessages=selectedChatId=>{const cachedMessages=localStorage.getItem(\"\".concat(CACHE_PREFIX,\"-messages-\").concat(selectedChatId));return cachedMessages?JSON.parse(cachedMessages):[];};const saveChatsToCache=chats=>{localStorage.setItem(\"\".concat(CACHE_PREFIX,\"-chats\"),JSON.stringify(chats));};const saveMessagesToCache=(chatId,messages)=>{localStorage.setItem(\"\".concat(CACHE_PREFIX,\"-messages-\").concat(chatId),JSON.stringify(messages));};// Fetch the last message from the database\nconst fetchLastMessageFromDB=async chatId=>{try{const{data:messages,error}=await supabase.from('messages').select('*').eq('chat_id',chatId).order('created_at',{ascending:false}).limit(1);if(error)throw error;return messages.length>0?messages[0]:null;}catch(error){console.error('Error fetching last message from DB:',error);return null;}};// Fetch the last message from the cache or DB\nconst fetchLastMessageFromCacheOrDB=async chatId=>{// Check cache first\nconst cachedMessages=getCachedMessages(chatId);if(cachedMessages.length>0){return cachedMessages[cachedMessages.length-1];// Return the last cached message\n}// If not found in cache, fetch from DB\nreturn await fetchLastMessageFromDB(chatId);};const fetchChatsFromDB=async()=>{try{let{data:chats,error:chatsError}=await supabase.from('chats').select('*');if(chatsError)throw chatsError;const chatIds=chats.map(chat=>chat.id);let{data:messages,error:messagesError}=await supabase.rpc('get_last_messages_for_chats',{chat_ids:chatIds});if(messagesError)throw messagesError;const chatMap=chats.reduce((acc,chat)=>{acc[chat.id]={...chat,last_message:null};return acc;},{});messages.forEach(message=>{if(chatMap[message.chat_id]){chatMap[message.chat_id].last_message=message;}});return Object.values(chatMap);}catch(error){console.error('Ошибка при загрузке чатов и сообщений:',error);return[];}};const fetchMessagesFromDB=async chatId=>{try{let{data,error}=await supabase.from('messages').select('*').eq('chat_id',chatId).order('created_at',{ascending:true});if(error)throw error;return Array.isArray(data)?data:[];}catch(error){console.error('Ошибка при загрузке сообщений:',error);return[];}};const updateNewMessagesCount=chats=>{const count=chats.reduce((acc,chat)=>{var _chat$last_message;const lastMessage=(_chat$last_message=chat.last_message)===null||_chat$last_message===void 0?void 0:_chat$last_message[0];if(lastMessage&&lastMessage.user_id!==userId&&!lastMessage.seen_by.includes(userId)){return acc+1;}return acc;},0);setNewMessagesCount(count);};const handleChatInsert=async newChat=>{console.log('newChat',newChat);// Fetch members' information\nif(!newChat.is_group){const memberIds=newChat.members;const{data:memberData,error:memberError}=await supabase.from('users_public_information').select('username, first_name, last_name, avatar_url, cover_url, status, auth_id').in('auth_id',memberIds);if(memberError){console.error(memberError);}else{newChat.membersInfo=memberData;}}// Fetch the last message for the new chat\nconst fetchedLastMessage=await fetchLastMessageFromDB(newChat.id);newChat.last_message=fetchedLastMessage;setChatList(prevChats=>{const updatedChats=[...prevChats,newChat];saveChatsToCache(updatedChats);return updatedChats;});};const handleChatUpdate=async updatedChat=>{console.log('updatedChat',updatedChat);// Fetch members' information again if it's not a group chat\nif(!updatedChat.is_group){const memberIds=updatedChat.members;const{data:memberData,error:memberError}=await supabase.from('users_public_information').select('username, first_name, last_name, avatar_url, cover_url, status, auth_id').in('auth_id',memberIds);if(memberError){console.error(memberError);}else{updatedChat.membersInfo=memberData;}}setChatList(prevChats=>{const updatedChats=prevChats.map(chat=>chat.id===updatedChat.id?updatedChat:chat);updateNewMessagesCount(updatedChats);saveChatsToCache(updatedChats);return updatedChats;});};const handleChatDelete=deletedChat=>{setChatList(prevChats=>{const updatedChats=prevChats.filter(chat=>chat.id!==deletedChat.id);updateNewMessagesCount(updatedChats);saveChatsToCache(updatedChats);return updatedChats;});};const handleMessageInsert=newMessage=>{// Добавляем новое сообщение в список сообщений\nsetMessagesCache(prevCache=>{const chatMessages=prevCache[newMessage.chat_id]||[];const updatedMessages=[...chatMessages,newMessage];// Добавляем новое сообщение\nsaveMessagesToCache(newMessage.chat_id,updatedMessages);// Обновляем кеш\nreturn{...prevCache,[newMessage.chat_id]:updatedMessages};});// Обновляем последний чат\nsetChatList(prevChats=>{const updatedChats=prevChats.map(chat=>{if(chat.id===newMessage.chat_id){return{...chat,last_message:newMessage};// Обновляем последнее сообщение\n}return chat;});saveChatsToCache(updatedChats);// Обновляем кеш чатов\nreturn updatedChats;});if(!isPageVisible){playNotificationSound();// Проигрываем звук уведомления, если страница не видна\n}};const handleMessageUpdate=updatedMessage=>{setChatList(prevChats=>{const updatedChats=prevChats.map(chat=>{if(chat.id===updatedMessage.chat_id){// Обновляем last_message для конкретного чата\nreturn{...chat,last_message:updatedMessage};}return chat;});updateNewMessagesCount(updatedChats);saveChatsToCache(updatedChats);return updatedChats;// Возвращаем обновленные чаты\n});// Обновляем сообщения только для конкретного чата\nsetMessages(prevMessages=>{const updatedMessages=prevMessages.map(msg=>msg.id===updatedMessage.id?updatedMessage:msg);// Сортируем только в случае необходимости\nconst sortedMessages=updatedMessages.slice().sort((a,b)=>new Date(a.created_at)-new Date(b.created_at));// Обновляем кэш\nsetMessagesCache(prevCache=>({...prevCache,[updatedMessage.chat_id]:sortedMessages}));saveMessagesToCache(updatedMessage.chat_id,sortedMessages);return sortedMessages;});console.log('Обновление сообщения:',updatedMessage);};const handleMessageDelete=async deletedMessage=>{// Удаляем сообщение из кэша\nsetMessagesCache(prevCache=>{const chatMessages=prevCache[deletedMessage.chat_id]||[];const updatedMessages=chatMessages.filter(msg=>msg.id!==deletedMessage.id);saveMessagesToCache(deletedMessage.chat_id,updatedMessages);return{...prevCache,[deletedMessage.chat_id]:updatedMessages};});// Удаляем сообщение из UI\nsetMessages(prevMessages=>prevMessages.filter(msg=>msg.id!==deletedMessage.id));// Обновляем поле last_message в списке чатов\nsetChatList(prevChats=>{const updatedChatList=prevChats.map(chat=>{if(chat.id===deletedMessage.chat_id){var _prevChats$find;// Если в чате остались сообщения, обновляем last_message\nconst chatMessages=((_prevChats$find=prevChats.find(c=>c.id===chat.id))===null||_prevChats$find===void 0?void 0:_prevChats$find.messages)||[];if(chatMessages.length>0){return{...chat,last_message:chatMessages[chatMessages.length-1]};}// Если сообщений больше нет, можно сбросить last_message или оставить какое-то значение\nreturn{...chat,last_message:null};}return chat;});// Сохраняем обновленный список чатов в кэш\nsaveChatsToCache(updatedChatList);return updatedChatList;});};const playNotificationSound=()=>{console.log('Отправка звука');const audio=new Audio('/path/to/notification-sound.mp3');audio.play();};useEffect(()=>{const handleVisibilityChange=()=>{setIsPageVisible(document.visibilityState==='visible');};document.addEventListener('visibilitychange',handleVisibilityChange);return()=>{document.removeEventListener('visibilitychange',handleVisibilityChange);};},[]);useEffect(()=>{const sendMessages=async()=>{if(pendingQueue.length===0)return;// Если нет сообщений в очереди, ничего не делаем\nconst message=pendingQueue[0];// Берем первое сообщение в очереди\nif(messageStatus[message.id]==='pending'){try{console.log('Отправка сообщения',message);const{dataIn,errorIn}=await supabase.from('messages').insert([{chat_id:message.chat_id,content:message.content,user_id:message.user_id}]);if(errorIn){// Обновляем статус на 'failed'\nsetMessageStatus(prevStatus=>({...prevStatus,[message.id]:'failed'}));throw errorIn;}// Обновляем статус на 'sent'\nsetMessageStatus(prevStatus=>({...prevStatus,[message.id]:'sent'}));// Убираем сообщение из очереди\nsetPendingQueue(prevQueue=>prevQueue.slice(1));}catch(error){console.error('Ошибка отправки сообщения:',error);// Обновляем статус на 'failed'\nsetMessageStatus(prevStatus=>({...prevStatus,[message.id]:'failed'}));}}};if(pendingQueue.length>0){sendMessages();}},[pendingQueue,messageStatus]);return null;};export default MessageHandler;","map":{"version":3,"names":["React","useState","useEffect","useContext","UserContext","ChatContext","getSupabaseClient","supabase","CACHE_PREFIX","MessageHandler","chatList","setChatList","messages","setMessages","selectedChatId","isLoadingChats","setIsLoadingChats","isLoadingMessages","setIsLoadingMessages","newMessagesCount","setNewMessagesCount","isPageVisible","setIsPageVisible","selectedChat","setSelectedChat","messageStatus","setMessageStatus","pendingQueue","setPendingQueue","isAuthenticated","userId","usersCache","setUsersCache","messagesCache","setMessagesCache","chatsCache","setChatsCache","initializeChats","length","cachedChats","getCachedChats","fetchedChats","fetchChatsFromDB","enrichedChats","Promise","all","map","chat","is_group","membersInfo","enrichMemberData","members","saveChatsToCache","updateNewMessagesCount","chatSubscription","channel","concat","on","event","schema","table","payload","handleChatInsert","new","handleChatUpdate","handleChatDelete","old","subscribe","messageSubscription","handleMessageInsert","handleMessageUpdate","handleMessageDelete","removeChannel","memberIds","missingMemberIds","filter","id","data","newMembers","error","memberError","from","select","in","console","updatedCache","forEach","user","auth_id","fetchSelectedChat","chatFromState","find","chatFromCache","chatWithUser","includes","userInfo","userError","eq","single","chatExists","fetchMessages","cachedMessages","getCachedMessages","fetchedMessages","fetchMessagesFromDB","prevCache","saveMessagesToCache","localStorage","getItem","JSON","parse","chats","setItem","stringify","chatId","fetchLastMessageFromDB","order","ascending","limit","fetchLastMessageFromCacheOrDB","chatsError","chatIds","messagesError","rpc","chat_ids","chatMap","reduce","acc","last_message","message","chat_id","Object","values","Array","isArray","count","_chat$last_message","lastMessage","user_id","seen_by","newChat","log","memberData","fetchedLastMessage","prevChats","updatedChats","updatedChat","deletedChat","newMessage","chatMessages","updatedMessages","playNotificationSound","updatedMessage","prevMessages","msg","sortedMessages","slice","sort","a","b","Date","created_at","deletedMessage","updatedChatList","_prevChats$find","c","audio","Audio","play","handleVisibilityChange","document","visibilityState","addEventListener","removeEventListener","sendMessages","dataIn","errorIn","insert","content","prevStatus","prevQueue"],"sources":["C:/Users/player/Documents/GitHub/synask-app/src/components/MessageHandler.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport UserContext from './UserContext';\r\nimport ChatContext from './ChatContext';\r\nimport getSupabaseClient from '../pages/config/SupabaseClient';\r\n\r\nconst supabase = getSupabaseClient();\r\nconst CACHE_PREFIX = 'chat-app-cache-v1';\r\n\r\nexport const MessageHandler = () => {\r\n    const {\r\n        chatList, setChatList,\r\n        messages, setMessages,\r\n        selectedChatId,\r\n        isLoadingChats, setIsLoadingChats,\r\n        isLoadingMessages, setIsLoadingMessages,\r\n        newMessagesCount, setNewMessagesCount,\r\n        isPageVisible, setIsPageVisible,\r\n        selectedChat, setSelectedChat,\r\n        messageStatus, setMessageStatus,\r\n        pendingQueue, setPendingQueue\r\n    } = useContext(ChatContext);\r\n    const { isAuthenticated, userId, usersCache, setUsersCache } = useContext(UserContext);\r\n\r\n    const [messagesCache, setMessagesCache] = useState({});\r\n    const [chatsCache, setChatsCache] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (!isAuthenticated) return;\r\n\r\n        setIsLoadingChats(true);\r\n\r\n        const initializeChats = async () => {\r\n            if (chatsCache.length > 0) {\r\n                setChatList(chatsCache);\r\n                setIsLoadingChats(false);\r\n                return;\r\n            }\r\n\r\n            const cachedChats = getCachedChats();\r\n            if (cachedChats.length > 0) {\r\n                setChatList(cachedChats);\r\n                setIsLoadingChats(false);\r\n                setChatsCache(cachedChats);\r\n            }\r\n\r\n            const fetchedChats = await fetchChatsFromDB();\r\n            const enrichedChats = await Promise.all(fetchedChats.map(async (chat) => {\r\n                if (!chat.is_group) {\r\n                    chat.membersInfo = await enrichMemberData(chat.members);\r\n                }\r\n                return chat;\r\n            }));\r\n\r\n            setChatList(enrichedChats);\r\n            setIsLoadingChats(false);\r\n            setChatsCache(enrichedChats);\r\n            saveChatsToCache(enrichedChats);\r\n\r\n            updateNewMessagesCount(fetchedChats);\r\n        };\r\n\r\n        initializeChats();\r\n\r\n        const chatSubscription = supabase\r\n            .channel(`chats:${userId}`)\r\n            .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'chats' }, payload => handleChatInsert(payload.new))\r\n            .on('postgres_changes', { event: 'UPDATE', schema: 'public', table: 'chats' }, payload => handleChatUpdate(payload.new))\r\n            .on('postgres_changes', { event: 'DELETE', schema: 'public', table: 'chats' }, payload => handleChatDelete(payload.old))\r\n            .subscribe();\r\n\r\n        const messageSubscription = supabase\r\n            .channel(`messages:${userId}`)\r\n            .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'messages' }, payload => handleMessageInsert(payload.new))\r\n            .on('postgres_changes', { event: 'UPDATE', schema: 'public', table: 'messages' }, payload => handleMessageUpdate(payload.new))\r\n            .on('postgres_changes', { event: 'DELETE', schema: 'public', table: 'messages' }, payload => handleMessageDelete(payload.old))\r\n            .subscribe();\r\n\r\n        return () => {\r\n            supabase.removeChannel(chatSubscription);\r\n            supabase.removeChannel(messageSubscription);\r\n        };\r\n    }, [isAuthenticated]);\r\n\r\n    const enrichMemberData = async (memberIds) => {\r\n        // Проверка в кэше\r\n        const missingMemberIds = memberIds.filter(id => !usersCache[id]);\r\n        if (missingMemberIds.length === 0) {\r\n            return memberIds.map(id => usersCache[id]);\r\n        }\r\n\r\n        // Получение недостающих пользователей из базы данных\r\n        const { data: newMembers, error: memberError } = await supabase\r\n            .from('users_public_information')\r\n            .select('username, first_name, last_name, avatar_url, cover_url, status, auth_id')\r\n            .in('auth_id', missingMemberIds);\r\n\r\n        if (memberError) {\r\n            console.error(memberError);\r\n            return [];\r\n        }\r\n\r\n        // Обновление кэша\r\n        const updatedCache = { ...usersCache };\r\n        newMembers.forEach(user => {\r\n            updatedCache[user.auth_id] = user;\r\n        });\r\n        setUsersCache(updatedCache);\r\n\r\n        return memberIds.map(id => updatedCache[id]);\r\n    };\r\n\r\n    useEffect(() => {\r\n  if (!selectedChatId) return;\r\n\r\n  const fetchSelectedChat = async () => {\r\n        // 1. Проверяем, не совпадает ли selectedChatId с userId\r\n        if (selectedChatId === userId) {\r\n          setSelectedChat({ error: 'Указанное айди совпадает с айди пользователя' });\r\n          return;\r\n        }\r\n\r\n        // 2. Проверяем в состоянии, существует ли чат с таким selectedChatId\r\n        const chatFromState = chatList.find(chat => chat.id === selectedChatId);\r\n        if (chatFromState) {\r\n          setSelectedChat(chatFromState);\r\n          return;\r\n        }\r\n\r\n        // 3. Проверяем кеш чатов в локальном хранилище\r\n        const cachedChats = getCachedChats();\r\n        const chatFromCache = cachedChats.find(chat => chat.id === selectedChatId);\r\n        if (chatFromCache) {\r\n          setSelectedChat(chatFromCache);\r\n        }\r\n\r\n        // 4. Если чата с таким selectedChatId не существует, ищем чат, где userId является членом\r\n        const chatWithUser = chatList.find(\r\n          chat => chat.members.includes(selectedChatId) && chat.is_group === false\r\n        );\r\n        if (chatWithUser) {\r\n          setSelectedChat(chatWithUser);\r\n        }\r\n\r\n        // 5. Если не найдено чатов, проверяем в базе данных пользователей\r\n        const { data: userInfo, error: userError } = await supabase\r\n          .from('users_public_information')\r\n          .select('username, first_name, last_name, avatar_url, cover_url, status, auth_id')\r\n          .eq('auth_id', selectedChatId)\r\n          .single();\r\n\r\n        if (userError || !userInfo) {\r\n          setSelectedChat({ error: 'Диалога по указанному айди не существует или пользователь был удалён' });\r\n        } else {\r\n          // Создаём новый чат с участником, если чат не найден\r\n          setSelectedChat({\r\n            membersInfo: [userInfo, { auth_id: userId }], // Добавляем информацию о текущем пользователе\r\n            chatExists: false\r\n          });\r\n        }\r\n      };\r\n\r\n      // Вызываем сначала функцию поиска или создания чата\r\n      fetchSelectedChat();\r\n  }, [selectedChatId, chatList]);\r\n\r\n  // Теперь загружаем сообщения только после установки selectedChat\r\n  useEffect(() => {\r\n      if (!selectedChat.id || selectedChat.error) return;\r\n\r\n      setIsLoadingMessages(true);\r\n\r\n      const fetchMessages = async () => {\r\n        // Проверяем кеш сообщений\r\n        if (messagesCache[selectedChat.id]) {\r\n          setMessages(messagesCache[selectedChat.id]);\r\n          setIsLoadingMessages(false);\r\n          return;\r\n        }\r\n\r\n        // Проверяем кеш сообщений в локальном хранилище\r\n        const cachedMessages = getCachedMessages(selectedChat.id);\r\n        if (cachedMessages.length > 0) {\r\n          setMessages(cachedMessages);\r\n          setIsLoadingMessages(false);\r\n        }\r\n\r\n        // Если в кеше нет сообщений, загружаем из базы данных\r\n        const fetchedMessages = await fetchMessagesFromDB(selectedChat.id);\r\n        setMessages(fetchedMessages);\r\n        setMessagesCache(prevCache => ({\r\n          ...prevCache,\r\n          [selectedChat.id]: fetchedMessages\r\n        }));\r\n        setIsLoadingMessages(false);\r\n        saveMessagesToCache(selectedChat.id, fetchedMessages);\r\n      };\r\n\r\n      fetchMessages();\r\n  }, [selectedChat]);\r\n\r\n\r\n    const getCachedChats = () => {\r\n        const cachedChats = localStorage.getItem(`${CACHE_PREFIX}-chats`);\r\n        return cachedChats ? JSON.parse(cachedChats) : [];\r\n    };\r\n\r\n    const getCachedMessages = (selectedChatId) => {\r\n        const cachedMessages = localStorage.getItem(`${CACHE_PREFIX}-messages-${selectedChatId}`);\r\n        return cachedMessages ? JSON.parse(cachedMessages) : [];\r\n    };\r\n\r\n    const saveChatsToCache = (chats) => {\r\n        localStorage.setItem(`${CACHE_PREFIX}-chats`, JSON.stringify(chats));\r\n    };\r\n\r\n    const saveMessagesToCache = (chatId, messages) => {\r\n        localStorage.setItem(`${CACHE_PREFIX}-messages-${chatId}`, JSON.stringify(messages));\r\n    };\r\n\r\n    // Fetch the last message from the database\r\n    const fetchLastMessageFromDB = async (chatId) => {\r\n        try {\r\n            const { data: messages, error } = await supabase\r\n                .from('messages')\r\n                .select('*')\r\n                .eq('chat_id', chatId)\r\n                .order('created_at', { ascending: false })\r\n                .limit(1);\r\n\r\n            if (error) throw error;\r\n\r\n            return messages.length > 0 ? messages[0] : null;\r\n        } catch (error) {\r\n            console.error('Error fetching last message from DB:', error);\r\n            return null;\r\n        }\r\n    };\r\n\r\n    // Fetch the last message from the cache or DB\r\n    const fetchLastMessageFromCacheOrDB = async (chatId) => {\r\n        // Check cache first\r\n        const cachedMessages = getCachedMessages(chatId);\r\n        if (cachedMessages.length > 0) {\r\n            return cachedMessages[cachedMessages.length - 1]; // Return the last cached message\r\n        }\r\n\r\n        // If not found in cache, fetch from DB\r\n        return await fetchLastMessageFromDB(chatId);\r\n    };\r\n\r\n\r\n    const fetchChatsFromDB = async () => {\r\n        try {\r\n            let { data: chats, error: chatsError } = await supabase\r\n                .from('chats')\r\n                .select('*');\r\n\r\n            if (chatsError) throw chatsError;\r\n\r\n            const chatIds = chats.map(chat => chat.id);\r\n\r\n            let { data: messages, error: messagesError } = await supabase\r\n                .rpc('get_last_messages_for_chats', { chat_ids: chatIds });\r\n\r\n            if (messagesError) throw messagesError;\r\n\r\n            const chatMap = chats.reduce((acc, chat) => {\r\n                acc[chat.id] = { ...chat, last_message: null };\r\n                return acc;\r\n            }, {});\r\n\r\n            messages.forEach(message => {\r\n                if (chatMap[message.chat_id]) {\r\n                    chatMap[message.chat_id].last_message = message;\r\n                }\r\n            });\r\n\r\n            return Object.values(chatMap);\r\n\r\n        } catch (error) {\r\n            console.error('Ошибка при загрузке чатов и сообщений:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const fetchMessagesFromDB = async (chatId) => {\r\n        try {\r\n            let { data, error } = await supabase\r\n                .from('messages')\r\n                .select('*')\r\n                .eq('chat_id', chatId)\r\n                .order('created_at', { ascending: true });\r\n\r\n            if (error) throw error;\r\n\r\n            return Array.isArray(data) ? data : [];\r\n        } catch (error) {\r\n            console.error('Ошибка при загрузке сообщений:', error);\r\n            return [];\r\n        }\r\n    };\r\n\r\n    const updateNewMessagesCount = (chats) => {\r\n        const count = chats.reduce((acc, chat) => {\r\n            const lastMessage = chat.last_message?.[0];\r\n            if (lastMessage && lastMessage.user_id !== userId && !lastMessage.seen_by.includes(userId)) {\r\n                return acc + 1;\r\n            }\r\n            return acc;\r\n        }, 0);\r\n        setNewMessagesCount(count);\r\n    };\r\n\r\n    const handleChatInsert = async (newChat) => {\r\n        console.log('newChat', newChat);\r\n\r\n        // Fetch members' information\r\n        if (!newChat.is_group) {\r\n            const memberIds = newChat.members;\r\n            const { data: memberData, error: memberError } = await supabase\r\n                .from('users_public_information')\r\n                .select('username, first_name, last_name, avatar_url, cover_url, status, auth_id')\r\n                .in('auth_id', memberIds);\r\n\r\n            if (memberError) {\r\n                console.error(memberError);\r\n            } else {\r\n                newChat.membersInfo = memberData;\r\n            }\r\n        }\r\n\r\n        // Fetch the last message for the new chat\r\n        const fetchedLastMessage = await fetchLastMessageFromDB(newChat.id);\r\n        newChat.last_message = fetchedLastMessage;\r\n\r\n        setChatList((prevChats) => {\r\n            const updatedChats = [...prevChats, newChat];\r\n            saveChatsToCache(updatedChats);\r\n            return updatedChats;\r\n        });\r\n    };\r\n\r\n    const handleChatUpdate = async (updatedChat) => {\r\n        console.log('updatedChat', updatedChat);\r\n\r\n        // Fetch members' information again if it's not a group chat\r\n        if (!updatedChat.is_group) {\r\n            const memberIds = updatedChat.members;\r\n            const { data: memberData, error: memberError } = await supabase\r\n                .from('users_public_information')\r\n                .select('username, first_name, last_name, avatar_url, cover_url, status, auth_id')\r\n                .in('auth_id', memberIds);\r\n\r\n            if (memberError) {\r\n                console.error(memberError);\r\n            } else {\r\n                updatedChat.membersInfo = memberData;\r\n            }\r\n        }\r\n\r\n        setChatList((prevChats) => {\r\n            const updatedChats = prevChats.map((chat) =>\r\n                chat.id === updatedChat.id ? updatedChat : chat\r\n            );\r\n            updateNewMessagesCount(updatedChats);\r\n            saveChatsToCache(updatedChats);\r\n            return updatedChats;\r\n        });\r\n    };\r\n\r\n    const handleChatDelete = (deletedChat) => {\r\n        setChatList(prevChats => {\r\n            const updatedChats = prevChats.filter(chat => chat.id !== deletedChat.id);\r\n            updateNewMessagesCount(updatedChats);\r\n            saveChatsToCache(updatedChats);\r\n            return updatedChats;\r\n        });\r\n    };\r\n\r\n    const handleMessageInsert = (newMessage) => {\r\n        // Добавляем новое сообщение в список сообщений\r\n        setMessagesCache(prevCache => {\r\n            const chatMessages = prevCache[newMessage.chat_id] || [];\r\n            const updatedMessages = [...chatMessages, newMessage]; // Добавляем новое сообщение\r\n            saveMessagesToCache(newMessage.chat_id, updatedMessages); // Обновляем кеш\r\n            return {\r\n                ...prevCache,\r\n                [newMessage.chat_id]: updatedMessages\r\n            };\r\n        });\r\n\r\n        // Обновляем последний чат\r\n        setChatList(prevChats => {\r\n            const updatedChats = prevChats.map(chat => {\r\n                if (chat.id === newMessage.chat_id) {\r\n                    return { ...chat, last_message: newMessage }; // Обновляем последнее сообщение\r\n                }\r\n                return chat;\r\n            });\r\n            saveChatsToCache(updatedChats); // Обновляем кеш чатов\r\n            return updatedChats;\r\n        });\r\n\r\n        if (!isPageVisible) {\r\n            playNotificationSound(); // Проигрываем звук уведомления, если страница не видна\r\n        }\r\n    };\r\n\r\n    const handleMessageUpdate = (updatedMessage) => {\r\n        setChatList(prevChats => {\r\n            const updatedChats = prevChats.map(chat => {\r\n                if (chat.id === updatedMessage.chat_id) {\r\n                    // Обновляем last_message для конкретного чата\r\n                    return { ...chat, last_message: updatedMessage };\r\n                }\r\n                return chat;\r\n            });\r\n\r\n            updateNewMessagesCount(updatedChats);\r\n            saveChatsToCache(updatedChats);\r\n\r\n            return updatedChats; // Возвращаем обновленные чаты\r\n        });\r\n\r\n        // Обновляем сообщения только для конкретного чата\r\n        setMessages(prevMessages => {\r\n            const updatedMessages = prevMessages.map(msg =>\r\n                msg.id === updatedMessage.id ? updatedMessage : msg\r\n            );\r\n\r\n            // Сортируем только в случае необходимости\r\n            const sortedMessages = updatedMessages.slice().sort((a, b) => new Date(a.created_at) - new Date(b.created_at));\r\n\r\n            // Обновляем кэш\r\n            setMessagesCache(prevCache => ({\r\n                ...prevCache,\r\n                [updatedMessage.chat_id]: sortedMessages\r\n            }));\r\n\r\n            saveMessagesToCache(updatedMessage.chat_id, sortedMessages);\r\n\r\n            return sortedMessages;\r\n        });\r\n\r\n        console.log('Обновление сообщения:', updatedMessage);\r\n    };\r\n\r\n\r\n\r\n    const handleMessageDelete = async (deletedMessage) => {\r\n        // Удаляем сообщение из кэша\r\n        setMessagesCache(prevCache => {\r\n            const chatMessages = prevCache[deletedMessage.chat_id] || [];\r\n            const updatedMessages = chatMessages.filter(msg => msg.id !== deletedMessage.id);\r\n            saveMessagesToCache(deletedMessage.chat_id, updatedMessages);\r\n\r\n            return {\r\n                ...prevCache,\r\n                [deletedMessage.chat_id]: updatedMessages\r\n            };\r\n        });\r\n\r\n        // Удаляем сообщение из UI\r\n        setMessages(prevMessages => prevMessages.filter(msg => msg.id !== deletedMessage.id));\r\n\r\n        // Обновляем поле last_message в списке чатов\r\n        setChatList(prevChats => {\r\n            const updatedChatList = prevChats.map(chat => {\r\n                if (chat.id === deletedMessage.chat_id) {\r\n                    // Если в чате остались сообщения, обновляем last_message\r\n                    const chatMessages = prevChats.find(c => c.id === chat.id)?.messages || [];\r\n                    if (chatMessages.length > 0) {\r\n                        return { ...chat, last_message: chatMessages[chatMessages.length - 1] };\r\n                    }\r\n                    // Если сообщений больше нет, можно сбросить last_message или оставить какое-то значение\r\n                    return { ...chat, last_message: null };\r\n                }\r\n                return chat;\r\n            });\r\n\r\n            // Сохраняем обновленный список чатов в кэш\r\n            saveChatsToCache(updatedChatList);\r\n            return updatedChatList;\r\n        });\r\n    };\r\n\r\n\r\n\r\n    const playNotificationSound = () => {\r\n        console.log('Отправка звука');\r\n        const audio = new Audio('/path/to/notification-sound.mp3');\r\n        audio.play();\r\n    };\r\n\r\n    useEffect(() => {\r\n        const handleVisibilityChange = () => {\r\n            setIsPageVisible(document.visibilityState === 'visible');\r\n        };\r\n\r\n        document.addEventListener('visibilitychange', handleVisibilityChange);\r\n\r\n        return () => {\r\n            document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const sendMessages = async () => {\r\n            if (pendingQueue.length === 0) return; // Если нет сообщений в очереди, ничего не делаем\r\n\r\n            const message = pendingQueue[0]; // Берем первое сообщение в очереди\r\n\r\n            if (messageStatus[message.id] === 'pending') {\r\n                try {\r\n                    console.log('Отправка сообщения', message);\r\n\r\n                    const { dataIn, errorIn } = await supabase\r\n                        .from('messages')\r\n                        .insert([{ chat_id: message.chat_id, content: message.content, user_id: message.user_id }]);\r\n\r\n                    if (errorIn) {\r\n                        // Обновляем статус на 'failed'\r\n                        setMessageStatus(prevStatus => ({\r\n                            ...prevStatus,\r\n                            [message.id]: 'failed'\r\n                        }));\r\n                        throw errorIn;\r\n                    }\r\n\r\n                    // Обновляем статус на 'sent'\r\n                    setMessageStatus(prevStatus => ({\r\n                        ...prevStatus,\r\n                        [message.id]: 'sent'\r\n                    }));\r\n\r\n                    // Убираем сообщение из очереди\r\n                    setPendingQueue((prevQueue) => prevQueue.slice(1));\r\n\r\n                } catch (error) {\r\n                    console.error('Ошибка отправки сообщения:', error);\r\n\r\n                    // Обновляем статус на 'failed'\r\n                    setMessageStatus(prevStatus => ({\r\n                        ...prevStatus,\r\n                        [message.id]: 'failed'\r\n                    }));\r\n                }\r\n            }\r\n        };\r\n\r\n        if (pendingQueue.length > 0) {\r\n            sendMessages();\r\n        }\r\n    }, [pendingQueue, messageStatus]);\r\n\r\n\r\n    return null;\r\n};\r\n\r\nexport default MessageHandler;\r\n\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,UAAU,KAAQ,OAAO,CAC9D,MAAO,CAAAC,WAAW,KAAM,eAAe,CACvC,MAAO,CAAAC,WAAW,KAAM,eAAe,CACvC,MAAO,CAAAC,iBAAiB,KAAM,gCAAgC,CAE9D,KAAM,CAAAC,QAAQ,CAAGD,iBAAiB,CAAC,CAAC,CACpC,KAAM,CAAAE,YAAY,CAAG,mBAAmB,CAExC,MAAO,MAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CAChC,KAAM,CACFC,QAAQ,CAAEC,WAAW,CACrBC,QAAQ,CAAEC,WAAW,CACrBC,cAAc,CACdC,cAAc,CAAEC,iBAAiB,CACjCC,iBAAiB,CAAEC,oBAAoB,CACvCC,gBAAgB,CAAEC,mBAAmB,CACrCC,aAAa,CAAEC,gBAAgB,CAC/BC,YAAY,CAAEC,eAAe,CAC7BC,aAAa,CAAEC,gBAAgB,CAC/BC,YAAY,CAAEC,eAClB,CAAC,CAAGzB,UAAU,CAACE,WAAW,CAAC,CAC3B,KAAM,CAAEwB,eAAe,CAAEC,MAAM,CAAEC,UAAU,CAAEC,aAAc,CAAC,CAAG7B,UAAU,CAACC,WAAW,CAAC,CAEtF,KAAM,CAAC6B,aAAa,CAAEC,gBAAgB,CAAC,CAAGjC,QAAQ,CAAC,CAAC,CAAC,CAAC,CACtD,KAAM,CAACkC,UAAU,CAAEC,aAAa,CAAC,CAAGnC,QAAQ,CAAC,EAAE,CAAC,CAEhDC,SAAS,CAAC,IAAM,CACZ,GAAI,CAAC2B,eAAe,CAAE,OAEtBb,iBAAiB,CAAC,IAAI,CAAC,CAEvB,KAAM,CAAAqB,eAAe,CAAG,KAAAA,CAAA,GAAY,CAChC,GAAIF,UAAU,CAACG,MAAM,CAAG,CAAC,CAAE,CACvB3B,WAAW,CAACwB,UAAU,CAAC,CACvBnB,iBAAiB,CAAC,KAAK,CAAC,CACxB,OACJ,CAEA,KAAM,CAAAuB,WAAW,CAAGC,cAAc,CAAC,CAAC,CACpC,GAAID,WAAW,CAACD,MAAM,CAAG,CAAC,CAAE,CACxB3B,WAAW,CAAC4B,WAAW,CAAC,CACxBvB,iBAAiB,CAAC,KAAK,CAAC,CACxBoB,aAAa,CAACG,WAAW,CAAC,CAC9B,CAEA,KAAM,CAAAE,YAAY,CAAG,KAAM,CAAAC,gBAAgB,CAAC,CAAC,CAC7C,KAAM,CAAAC,aAAa,CAAG,KAAM,CAAAC,OAAO,CAACC,GAAG,CAACJ,YAAY,CAACK,GAAG,CAAC,KAAO,CAAAC,IAAI,EAAK,CACrE,GAAI,CAACA,IAAI,CAACC,QAAQ,CAAE,CAChBD,IAAI,CAACE,WAAW,CAAG,KAAM,CAAAC,gBAAgB,CAACH,IAAI,CAACI,OAAO,CAAC,CAC3D,CACA,MAAO,CAAAJ,IAAI,CACf,CAAC,CAAC,CAAC,CAEHpC,WAAW,CAACgC,aAAa,CAAC,CAC1B3B,iBAAiB,CAAC,KAAK,CAAC,CACxBoB,aAAa,CAACO,aAAa,CAAC,CAC5BS,gBAAgB,CAACT,aAAa,CAAC,CAE/BU,sBAAsB,CAACZ,YAAY,CAAC,CACxC,CAAC,CAEDJ,eAAe,CAAC,CAAC,CAEjB,KAAM,CAAAiB,gBAAgB,CAAG/C,QAAQ,CAC5BgD,OAAO,UAAAC,MAAA,CAAU1B,MAAM,CAAE,CAAC,CAC1B2B,EAAE,CAAC,kBAAkB,CAAE,CAAEC,KAAK,CAAE,QAAQ,CAAEC,MAAM,CAAE,QAAQ,CAAEC,KAAK,CAAE,OAAQ,CAAC,CAAEC,OAAO,EAAIC,gBAAgB,CAACD,OAAO,CAACE,GAAG,CAAC,CAAC,CACvHN,EAAE,CAAC,kBAAkB,CAAE,CAAEC,KAAK,CAAE,QAAQ,CAAEC,MAAM,CAAE,QAAQ,CAAEC,KAAK,CAAE,OAAQ,CAAC,CAAEC,OAAO,EAAIG,gBAAgB,CAACH,OAAO,CAACE,GAAG,CAAC,CAAC,CACvHN,EAAE,CAAC,kBAAkB,CAAE,CAAEC,KAAK,CAAE,QAAQ,CAAEC,MAAM,CAAE,QAAQ,CAAEC,KAAK,CAAE,OAAQ,CAAC,CAAEC,OAAO,EAAII,gBAAgB,CAACJ,OAAO,CAACK,GAAG,CAAC,CAAC,CACvHC,SAAS,CAAC,CAAC,CAEhB,KAAM,CAAAC,mBAAmB,CAAG7D,QAAQ,CAC/BgD,OAAO,aAAAC,MAAA,CAAa1B,MAAM,CAAE,CAAC,CAC7B2B,EAAE,CAAC,kBAAkB,CAAE,CAAEC,KAAK,CAAE,QAAQ,CAAEC,MAAM,CAAE,QAAQ,CAAEC,KAAK,CAAE,UAAW,CAAC,CAAEC,OAAO,EAAIQ,mBAAmB,CAACR,OAAO,CAACE,GAAG,CAAC,CAAC,CAC7HN,EAAE,CAAC,kBAAkB,CAAE,CAAEC,KAAK,CAAE,QAAQ,CAAEC,MAAM,CAAE,QAAQ,CAAEC,KAAK,CAAE,UAAW,CAAC,CAAEC,OAAO,EAAIS,mBAAmB,CAACT,OAAO,CAACE,GAAG,CAAC,CAAC,CAC7HN,EAAE,CAAC,kBAAkB,CAAE,CAAEC,KAAK,CAAE,QAAQ,CAAEC,MAAM,CAAE,QAAQ,CAAEC,KAAK,CAAE,UAAW,CAAC,CAAEC,OAAO,EAAIU,mBAAmB,CAACV,OAAO,CAACK,GAAG,CAAC,CAAC,CAC7HC,SAAS,CAAC,CAAC,CAEhB,MAAO,IAAM,CACT5D,QAAQ,CAACiE,aAAa,CAAClB,gBAAgB,CAAC,CACxC/C,QAAQ,CAACiE,aAAa,CAACJ,mBAAmB,CAAC,CAC/C,CAAC,CACL,CAAC,CAAE,CAACvC,eAAe,CAAC,CAAC,CAErB,KAAM,CAAAqB,gBAAgB,CAAG,KAAO,CAAAuB,SAAS,EAAK,CAC1C;AACA,KAAM,CAAAC,gBAAgB,CAAGD,SAAS,CAACE,MAAM,CAACC,EAAE,EAAI,CAAC7C,UAAU,CAAC6C,EAAE,CAAC,CAAC,CAChE,GAAIF,gBAAgB,CAACpC,MAAM,GAAK,CAAC,CAAE,CAC/B,MAAO,CAAAmC,SAAS,CAAC3B,GAAG,CAAC8B,EAAE,EAAI7C,UAAU,CAAC6C,EAAE,CAAC,CAAC,CAC9C,CAEA;AACA,KAAM,CAAEC,IAAI,CAAEC,UAAU,CAAEC,KAAK,CAAEC,WAAY,CAAC,CAAG,KAAM,CAAAzE,QAAQ,CAC1D0E,IAAI,CAAC,0BAA0B,CAAC,CAChCC,MAAM,CAAC,yEAAyE,CAAC,CACjFC,EAAE,CAAC,SAAS,CAAET,gBAAgB,CAAC,CAEpC,GAAIM,WAAW,CAAE,CACbI,OAAO,CAACL,KAAK,CAACC,WAAW,CAAC,CAC1B,MAAO,EAAE,CACb,CAEA;AACA,KAAM,CAAAK,YAAY,CAAG,CAAE,GAAGtD,UAAW,CAAC,CACtC+C,UAAU,CAACQ,OAAO,CAACC,IAAI,EAAI,CACvBF,YAAY,CAACE,IAAI,CAACC,OAAO,CAAC,CAAGD,IAAI,CACrC,CAAC,CAAC,CACFvD,aAAa,CAACqD,YAAY,CAAC,CAE3B,MAAO,CAAAZ,SAAS,CAAC3B,GAAG,CAAC8B,EAAE,EAAIS,YAAY,CAACT,EAAE,CAAC,CAAC,CAChD,CAAC,CAED1E,SAAS,CAAC,IAAM,CAClB,GAAI,CAACY,cAAc,CAAE,OAErB,KAAM,CAAA2E,iBAAiB,CAAG,KAAAA,CAAA,GAAY,CAChC;AACA,GAAI3E,cAAc,GAAKgB,MAAM,CAAE,CAC7BN,eAAe,CAAC,CAAEuD,KAAK,CAAE,8CAA+C,CAAC,CAAC,CAC1E,OACF,CAEA;AACA,KAAM,CAAAW,aAAa,CAAGhF,QAAQ,CAACiF,IAAI,CAAC5C,IAAI,EAAIA,IAAI,CAAC6B,EAAE,GAAK9D,cAAc,CAAC,CACvE,GAAI4E,aAAa,CAAE,CACjBlE,eAAe,CAACkE,aAAa,CAAC,CAC9B,OACF,CAEA;AACA,KAAM,CAAAnD,WAAW,CAAGC,cAAc,CAAC,CAAC,CACpC,KAAM,CAAAoD,aAAa,CAAGrD,WAAW,CAACoD,IAAI,CAAC5C,IAAI,EAAIA,IAAI,CAAC6B,EAAE,GAAK9D,cAAc,CAAC,CAC1E,GAAI8E,aAAa,CAAE,CACjBpE,eAAe,CAACoE,aAAa,CAAC,CAChC,CAEA;AACA,KAAM,CAAAC,YAAY,CAAGnF,QAAQ,CAACiF,IAAI,CAChC5C,IAAI,EAAIA,IAAI,CAACI,OAAO,CAAC2C,QAAQ,CAAChF,cAAc,CAAC,EAAIiC,IAAI,CAACC,QAAQ,GAAK,KACrE,CAAC,CACD,GAAI6C,YAAY,CAAE,CAChBrE,eAAe,CAACqE,YAAY,CAAC,CAC/B,CAEA;AACA,KAAM,CAAEhB,IAAI,CAAEkB,QAAQ,CAAEhB,KAAK,CAAEiB,SAAU,CAAC,CAAG,KAAM,CAAAzF,QAAQ,CACxD0E,IAAI,CAAC,0BAA0B,CAAC,CAChCC,MAAM,CAAC,yEAAyE,CAAC,CACjFe,EAAE,CAAC,SAAS,CAAEnF,cAAc,CAAC,CAC7BoF,MAAM,CAAC,CAAC,CAEX,GAAIF,SAAS,EAAI,CAACD,QAAQ,CAAE,CAC1BvE,eAAe,CAAC,CAAEuD,KAAK,CAAE,sEAAuE,CAAC,CAAC,CACpG,CAAC,IAAM,CACL;AACAvD,eAAe,CAAC,CACdyB,WAAW,CAAE,CAAC8C,QAAQ,CAAE,CAAEP,OAAO,CAAE1D,MAAO,CAAC,CAAC,CAAE;AAC9CqE,UAAU,CAAE,KACd,CAAC,CAAC,CACJ,CACF,CAAC,CAED;AACAV,iBAAiB,CAAC,CAAC,CACvB,CAAC,CAAE,CAAC3E,cAAc,CAAEJ,QAAQ,CAAC,CAAC,CAE9B;AACAR,SAAS,CAAC,IAAM,CACZ,GAAI,CAACqB,YAAY,CAACqD,EAAE,EAAIrD,YAAY,CAACwD,KAAK,CAAE,OAE5C7D,oBAAoB,CAAC,IAAI,CAAC,CAE1B,KAAM,CAAAkF,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC;AACA,GAAInE,aAAa,CAACV,YAAY,CAACqD,EAAE,CAAC,CAAE,CAClC/D,WAAW,CAACoB,aAAa,CAACV,YAAY,CAACqD,EAAE,CAAC,CAAC,CAC3C1D,oBAAoB,CAAC,KAAK,CAAC,CAC3B,OACF,CAEA;AACA,KAAM,CAAAmF,cAAc,CAAGC,iBAAiB,CAAC/E,YAAY,CAACqD,EAAE,CAAC,CACzD,GAAIyB,cAAc,CAAC/D,MAAM,CAAG,CAAC,CAAE,CAC7BzB,WAAW,CAACwF,cAAc,CAAC,CAC3BnF,oBAAoB,CAAC,KAAK,CAAC,CAC7B,CAEA;AACA,KAAM,CAAAqF,eAAe,CAAG,KAAM,CAAAC,mBAAmB,CAACjF,YAAY,CAACqD,EAAE,CAAC,CAClE/D,WAAW,CAAC0F,eAAe,CAAC,CAC5BrE,gBAAgB,CAACuE,SAAS,GAAK,CAC7B,GAAGA,SAAS,CACZ,CAAClF,YAAY,CAACqD,EAAE,EAAG2B,eACrB,CAAC,CAAC,CAAC,CACHrF,oBAAoB,CAAC,KAAK,CAAC,CAC3BwF,mBAAmB,CAACnF,YAAY,CAACqD,EAAE,CAAE2B,eAAe,CAAC,CACvD,CAAC,CAEDH,aAAa,CAAC,CAAC,CACnB,CAAC,CAAE,CAAC7E,YAAY,CAAC,CAAC,CAGhB,KAAM,CAAAiB,cAAc,CAAGA,CAAA,GAAM,CACzB,KAAM,CAAAD,WAAW,CAAGoE,YAAY,CAACC,OAAO,IAAApD,MAAA,CAAIhD,YAAY,UAAQ,CAAC,CACjE,MAAO,CAAA+B,WAAW,CAAGsE,IAAI,CAACC,KAAK,CAACvE,WAAW,CAAC,CAAG,EAAE,CACrD,CAAC,CAED,KAAM,CAAA+D,iBAAiB,CAAIxF,cAAc,EAAK,CAC1C,KAAM,CAAAuF,cAAc,CAAGM,YAAY,CAACC,OAAO,IAAApD,MAAA,CAAIhD,YAAY,eAAAgD,MAAA,CAAa1C,cAAc,CAAE,CAAC,CACzF,MAAO,CAAAuF,cAAc,CAAGQ,IAAI,CAACC,KAAK,CAACT,cAAc,CAAC,CAAG,EAAE,CAC3D,CAAC,CAED,KAAM,CAAAjD,gBAAgB,CAAI2D,KAAK,EAAK,CAChCJ,YAAY,CAACK,OAAO,IAAAxD,MAAA,CAAIhD,YAAY,WAAUqG,IAAI,CAACI,SAAS,CAACF,KAAK,CAAC,CAAC,CACxE,CAAC,CAED,KAAM,CAAAL,mBAAmB,CAAGA,CAACQ,MAAM,CAAEtG,QAAQ,GAAK,CAC9C+F,YAAY,CAACK,OAAO,IAAAxD,MAAA,CAAIhD,YAAY,eAAAgD,MAAA,CAAa0D,MAAM,EAAIL,IAAI,CAACI,SAAS,CAACrG,QAAQ,CAAC,CAAC,CACxF,CAAC,CAED;AACA,KAAM,CAAAuG,sBAAsB,CAAG,KAAO,CAAAD,MAAM,EAAK,CAC7C,GAAI,CACA,KAAM,CAAErC,IAAI,CAAEjE,QAAQ,CAAEmE,KAAM,CAAC,CAAG,KAAM,CAAAxE,QAAQ,CAC3C0E,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,GAAG,CAAC,CACXe,EAAE,CAAC,SAAS,CAAEiB,MAAM,CAAC,CACrBE,KAAK,CAAC,YAAY,CAAE,CAAEC,SAAS,CAAE,KAAM,CAAC,CAAC,CACzCC,KAAK,CAAC,CAAC,CAAC,CAEb,GAAIvC,KAAK,CAAE,KAAM,CAAAA,KAAK,CAEtB,MAAO,CAAAnE,QAAQ,CAAC0B,MAAM,CAAG,CAAC,CAAG1B,QAAQ,CAAC,CAAC,CAAC,CAAG,IAAI,CACnD,CAAE,MAAOmE,KAAK,CAAE,CACZK,OAAO,CAACL,KAAK,CAAC,sCAAsC,CAAEA,KAAK,CAAC,CAC5D,MAAO,KAAI,CACf,CACJ,CAAC,CAED;AACA,KAAM,CAAAwC,6BAA6B,CAAG,KAAO,CAAAL,MAAM,EAAK,CACpD;AACA,KAAM,CAAAb,cAAc,CAAGC,iBAAiB,CAACY,MAAM,CAAC,CAChD,GAAIb,cAAc,CAAC/D,MAAM,CAAG,CAAC,CAAE,CAC3B,MAAO,CAAA+D,cAAc,CAACA,cAAc,CAAC/D,MAAM,CAAG,CAAC,CAAC,CAAE;AACtD,CAEA;AACA,MAAO,MAAM,CAAA6E,sBAAsB,CAACD,MAAM,CAAC,CAC/C,CAAC,CAGD,KAAM,CAAAxE,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACjC,GAAI,CACA,GAAI,CAAEmC,IAAI,CAAEkC,KAAK,CAAEhC,KAAK,CAAEyC,UAAW,CAAC,CAAG,KAAM,CAAAjH,QAAQ,CAClD0E,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,GAAG,CAAC,CAEhB,GAAIsC,UAAU,CAAE,KAAM,CAAAA,UAAU,CAEhC,KAAM,CAAAC,OAAO,CAAGV,KAAK,CAACjE,GAAG,CAACC,IAAI,EAAIA,IAAI,CAAC6B,EAAE,CAAC,CAE1C,GAAI,CAAEC,IAAI,CAAEjE,QAAQ,CAAEmE,KAAK,CAAE2C,aAAc,CAAC,CAAG,KAAM,CAAAnH,QAAQ,CACxDoH,GAAG,CAAC,6BAA6B,CAAE,CAAEC,QAAQ,CAAEH,OAAQ,CAAC,CAAC,CAE9D,GAAIC,aAAa,CAAE,KAAM,CAAAA,aAAa,CAEtC,KAAM,CAAAG,OAAO,CAAGd,KAAK,CAACe,MAAM,CAAC,CAACC,GAAG,CAAEhF,IAAI,GAAK,CACxCgF,GAAG,CAAChF,IAAI,CAAC6B,EAAE,CAAC,CAAG,CAAE,GAAG7B,IAAI,CAAEiF,YAAY,CAAE,IAAK,CAAC,CAC9C,MAAO,CAAAD,GAAG,CACd,CAAC,CAAE,CAAC,CAAC,CAAC,CAENnH,QAAQ,CAAC0E,OAAO,CAAC2C,OAAO,EAAI,CACxB,GAAIJ,OAAO,CAACI,OAAO,CAACC,OAAO,CAAC,CAAE,CAC1BL,OAAO,CAACI,OAAO,CAACC,OAAO,CAAC,CAACF,YAAY,CAAGC,OAAO,CACnD,CACJ,CAAC,CAAC,CAEF,MAAO,CAAAE,MAAM,CAACC,MAAM,CAACP,OAAO,CAAC,CAEjC,CAAE,MAAO9C,KAAK,CAAE,CACZK,OAAO,CAACL,KAAK,CAAC,wCAAwC,CAAEA,KAAK,CAAC,CAC9D,MAAO,EAAE,CACb,CACJ,CAAC,CAED,KAAM,CAAAyB,mBAAmB,CAAG,KAAO,CAAAU,MAAM,EAAK,CAC1C,GAAI,CACA,GAAI,CAAErC,IAAI,CAAEE,KAAM,CAAC,CAAG,KAAM,CAAAxE,QAAQ,CAC/B0E,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,GAAG,CAAC,CACXe,EAAE,CAAC,SAAS,CAAEiB,MAAM,CAAC,CACrBE,KAAK,CAAC,YAAY,CAAE,CAAEC,SAAS,CAAE,IAAK,CAAC,CAAC,CAE7C,GAAItC,KAAK,CAAE,KAAM,CAAAA,KAAK,CAEtB,MAAO,CAAAsD,KAAK,CAACC,OAAO,CAACzD,IAAI,CAAC,CAAGA,IAAI,CAAG,EAAE,CAC1C,CAAE,MAAOE,KAAK,CAAE,CACZK,OAAO,CAACL,KAAK,CAAC,gCAAgC,CAAEA,KAAK,CAAC,CACtD,MAAO,EAAE,CACb,CACJ,CAAC,CAED,KAAM,CAAA1B,sBAAsB,CAAI0D,KAAK,EAAK,CACtC,KAAM,CAAAwB,KAAK,CAAGxB,KAAK,CAACe,MAAM,CAAC,CAACC,GAAG,CAAEhF,IAAI,GAAK,KAAAyF,kBAAA,CACtC,KAAM,CAAAC,WAAW,EAAAD,kBAAA,CAAGzF,IAAI,CAACiF,YAAY,UAAAQ,kBAAA,iBAAjBA,kBAAA,CAAoB,CAAC,CAAC,CAC1C,GAAIC,WAAW,EAAIA,WAAW,CAACC,OAAO,GAAK5G,MAAM,EAAI,CAAC2G,WAAW,CAACE,OAAO,CAAC7C,QAAQ,CAAChE,MAAM,CAAC,CAAE,CACxF,MAAO,CAAAiG,GAAG,CAAG,CAAC,CAClB,CACA,MAAO,CAAAA,GAAG,CACd,CAAC,CAAE,CAAC,CAAC,CACL3G,mBAAmB,CAACmH,KAAK,CAAC,CAC9B,CAAC,CAED,KAAM,CAAAzE,gBAAgB,CAAG,KAAO,CAAA8E,OAAO,EAAK,CACxCxD,OAAO,CAACyD,GAAG,CAAC,SAAS,CAAED,OAAO,CAAC,CAE/B;AACA,GAAI,CAACA,OAAO,CAAC5F,QAAQ,CAAE,CACnB,KAAM,CAAAyB,SAAS,CAAGmE,OAAO,CAACzF,OAAO,CACjC,KAAM,CAAE0B,IAAI,CAAEiE,UAAU,CAAE/D,KAAK,CAAEC,WAAY,CAAC,CAAG,KAAM,CAAAzE,QAAQ,CAC1D0E,IAAI,CAAC,0BAA0B,CAAC,CAChCC,MAAM,CAAC,yEAAyE,CAAC,CACjFC,EAAE,CAAC,SAAS,CAAEV,SAAS,CAAC,CAE7B,GAAIO,WAAW,CAAE,CACbI,OAAO,CAACL,KAAK,CAACC,WAAW,CAAC,CAC9B,CAAC,IAAM,CACH4D,OAAO,CAAC3F,WAAW,CAAG6F,UAAU,CACpC,CACJ,CAEA;AACA,KAAM,CAAAC,kBAAkB,CAAG,KAAM,CAAA5B,sBAAsB,CAACyB,OAAO,CAAChE,EAAE,CAAC,CACnEgE,OAAO,CAACZ,YAAY,CAAGe,kBAAkB,CAEzCpI,WAAW,CAAEqI,SAAS,EAAK,CACvB,KAAM,CAAAC,YAAY,CAAG,CAAC,GAAGD,SAAS,CAAEJ,OAAO,CAAC,CAC5CxF,gBAAgB,CAAC6F,YAAY,CAAC,CAC9B,MAAO,CAAAA,YAAY,CACvB,CAAC,CAAC,CACN,CAAC,CAED,KAAM,CAAAjF,gBAAgB,CAAG,KAAO,CAAAkF,WAAW,EAAK,CAC5C9D,OAAO,CAACyD,GAAG,CAAC,aAAa,CAAEK,WAAW,CAAC,CAEvC;AACA,GAAI,CAACA,WAAW,CAAClG,QAAQ,CAAE,CACvB,KAAM,CAAAyB,SAAS,CAAGyE,WAAW,CAAC/F,OAAO,CACrC,KAAM,CAAE0B,IAAI,CAAEiE,UAAU,CAAE/D,KAAK,CAAEC,WAAY,CAAC,CAAG,KAAM,CAAAzE,QAAQ,CAC1D0E,IAAI,CAAC,0BAA0B,CAAC,CAChCC,MAAM,CAAC,yEAAyE,CAAC,CACjFC,EAAE,CAAC,SAAS,CAAEV,SAAS,CAAC,CAE7B,GAAIO,WAAW,CAAE,CACbI,OAAO,CAACL,KAAK,CAACC,WAAW,CAAC,CAC9B,CAAC,IAAM,CACHkE,WAAW,CAACjG,WAAW,CAAG6F,UAAU,CACxC,CACJ,CAEAnI,WAAW,CAAEqI,SAAS,EAAK,CACvB,KAAM,CAAAC,YAAY,CAAGD,SAAS,CAAClG,GAAG,CAAEC,IAAI,EACpCA,IAAI,CAAC6B,EAAE,GAAKsE,WAAW,CAACtE,EAAE,CAAGsE,WAAW,CAAGnG,IAC/C,CAAC,CACDM,sBAAsB,CAAC4F,YAAY,CAAC,CACpC7F,gBAAgB,CAAC6F,YAAY,CAAC,CAC9B,MAAO,CAAAA,YAAY,CACvB,CAAC,CAAC,CACN,CAAC,CAED,KAAM,CAAAhF,gBAAgB,CAAIkF,WAAW,EAAK,CACtCxI,WAAW,CAACqI,SAAS,EAAI,CACrB,KAAM,CAAAC,YAAY,CAAGD,SAAS,CAACrE,MAAM,CAAC5B,IAAI,EAAIA,IAAI,CAAC6B,EAAE,GAAKuE,WAAW,CAACvE,EAAE,CAAC,CACzEvB,sBAAsB,CAAC4F,YAAY,CAAC,CACpC7F,gBAAgB,CAAC6F,YAAY,CAAC,CAC9B,MAAO,CAAAA,YAAY,CACvB,CAAC,CAAC,CACN,CAAC,CAED,KAAM,CAAA5E,mBAAmB,CAAI+E,UAAU,EAAK,CACxC;AACAlH,gBAAgB,CAACuE,SAAS,EAAI,CAC1B,KAAM,CAAA4C,YAAY,CAAG5C,SAAS,CAAC2C,UAAU,CAAClB,OAAO,CAAC,EAAI,EAAE,CACxD,KAAM,CAAAoB,eAAe,CAAG,CAAC,GAAGD,YAAY,CAAED,UAAU,CAAC,CAAE;AACvD1C,mBAAmB,CAAC0C,UAAU,CAAClB,OAAO,CAAEoB,eAAe,CAAC,CAAE;AAC1D,MAAO,CACH,GAAG7C,SAAS,CACZ,CAAC2C,UAAU,CAAClB,OAAO,EAAGoB,eAC1B,CAAC,CACL,CAAC,CAAC,CAEF;AACA3I,WAAW,CAACqI,SAAS,EAAI,CACrB,KAAM,CAAAC,YAAY,CAAGD,SAAS,CAAClG,GAAG,CAACC,IAAI,EAAI,CACvC,GAAIA,IAAI,CAAC6B,EAAE,GAAKwE,UAAU,CAAClB,OAAO,CAAE,CAChC,MAAO,CAAE,GAAGnF,IAAI,CAAEiF,YAAY,CAAEoB,UAAW,CAAC,CAAE;AAClD,CACA,MAAO,CAAArG,IAAI,CACf,CAAC,CAAC,CACFK,gBAAgB,CAAC6F,YAAY,CAAC,CAAE;AAChC,MAAO,CAAAA,YAAY,CACvB,CAAC,CAAC,CAEF,GAAI,CAAC5H,aAAa,CAAE,CAChBkI,qBAAqB,CAAC,CAAC,CAAE;AAC7B,CACJ,CAAC,CAED,KAAM,CAAAjF,mBAAmB,CAAIkF,cAAc,EAAK,CAC5C7I,WAAW,CAACqI,SAAS,EAAI,CACrB,KAAM,CAAAC,YAAY,CAAGD,SAAS,CAAClG,GAAG,CAACC,IAAI,EAAI,CACvC,GAAIA,IAAI,CAAC6B,EAAE,GAAK4E,cAAc,CAACtB,OAAO,CAAE,CACpC;AACA,MAAO,CAAE,GAAGnF,IAAI,CAAEiF,YAAY,CAAEwB,cAAe,CAAC,CACpD,CACA,MAAO,CAAAzG,IAAI,CACf,CAAC,CAAC,CAEFM,sBAAsB,CAAC4F,YAAY,CAAC,CACpC7F,gBAAgB,CAAC6F,YAAY,CAAC,CAE9B,MAAO,CAAAA,YAAY,CAAE;AACzB,CAAC,CAAC,CAEF;AACApI,WAAW,CAAC4I,YAAY,EAAI,CACxB,KAAM,CAAAH,eAAe,CAAGG,YAAY,CAAC3G,GAAG,CAAC4G,GAAG,EACxCA,GAAG,CAAC9E,EAAE,GAAK4E,cAAc,CAAC5E,EAAE,CAAG4E,cAAc,CAAGE,GACpD,CAAC,CAED;AACA,KAAM,CAAAC,cAAc,CAAGL,eAAe,CAACM,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAK,GAAI,CAAAC,IAAI,CAACF,CAAC,CAACG,UAAU,CAAC,CAAG,GAAI,CAAAD,IAAI,CAACD,CAAC,CAACE,UAAU,CAAC,CAAC,CAE9G;AACA/H,gBAAgB,CAACuE,SAAS,GAAK,CAC3B,GAAGA,SAAS,CACZ,CAAC+C,cAAc,CAACtB,OAAO,EAAGyB,cAC9B,CAAC,CAAC,CAAC,CAEHjD,mBAAmB,CAAC8C,cAAc,CAACtB,OAAO,CAAEyB,cAAc,CAAC,CAE3D,MAAO,CAAAA,cAAc,CACzB,CAAC,CAAC,CAEFvE,OAAO,CAACyD,GAAG,CAAC,uBAAuB,CAAEW,cAAc,CAAC,CACxD,CAAC,CAID,KAAM,CAAAjF,mBAAmB,CAAG,KAAO,CAAA2F,cAAc,EAAK,CAClD;AACAhI,gBAAgB,CAACuE,SAAS,EAAI,CAC1B,KAAM,CAAA4C,YAAY,CAAG5C,SAAS,CAACyD,cAAc,CAAChC,OAAO,CAAC,EAAI,EAAE,CAC5D,KAAM,CAAAoB,eAAe,CAAGD,YAAY,CAAC1E,MAAM,CAAC+E,GAAG,EAAIA,GAAG,CAAC9E,EAAE,GAAKsF,cAAc,CAACtF,EAAE,CAAC,CAChF8B,mBAAmB,CAACwD,cAAc,CAAChC,OAAO,CAAEoB,eAAe,CAAC,CAE5D,MAAO,CACH,GAAG7C,SAAS,CACZ,CAACyD,cAAc,CAAChC,OAAO,EAAGoB,eAC9B,CAAC,CACL,CAAC,CAAC,CAEF;AACAzI,WAAW,CAAC4I,YAAY,EAAIA,YAAY,CAAC9E,MAAM,CAAC+E,GAAG,EAAIA,GAAG,CAAC9E,EAAE,GAAKsF,cAAc,CAACtF,EAAE,CAAC,CAAC,CAErF;AACAjE,WAAW,CAACqI,SAAS,EAAI,CACrB,KAAM,CAAAmB,eAAe,CAAGnB,SAAS,CAAClG,GAAG,CAACC,IAAI,EAAI,CAC1C,GAAIA,IAAI,CAAC6B,EAAE,GAAKsF,cAAc,CAAChC,OAAO,CAAE,KAAAkC,eAAA,CACpC;AACA,KAAM,CAAAf,YAAY,CAAG,EAAAe,eAAA,CAAApB,SAAS,CAACrD,IAAI,CAAC0E,CAAC,EAAIA,CAAC,CAACzF,EAAE,GAAK7B,IAAI,CAAC6B,EAAE,CAAC,UAAAwF,eAAA,iBAArCA,eAAA,CAAuCxJ,QAAQ,GAAI,EAAE,CAC1E,GAAIyI,YAAY,CAAC/G,MAAM,CAAG,CAAC,CAAE,CACzB,MAAO,CAAE,GAAGS,IAAI,CAAEiF,YAAY,CAAEqB,YAAY,CAACA,YAAY,CAAC/G,MAAM,CAAG,CAAC,CAAE,CAAC,CAC3E,CACA;AACA,MAAO,CAAE,GAAGS,IAAI,CAAEiF,YAAY,CAAE,IAAK,CAAC,CAC1C,CACA,MAAO,CAAAjF,IAAI,CACf,CAAC,CAAC,CAEF;AACAK,gBAAgB,CAAC+G,eAAe,CAAC,CACjC,MAAO,CAAAA,eAAe,CAC1B,CAAC,CAAC,CACN,CAAC,CAID,KAAM,CAAAZ,qBAAqB,CAAGA,CAAA,GAAM,CAChCnE,OAAO,CAACyD,GAAG,CAAC,gBAAgB,CAAC,CAC7B,KAAM,CAAAyB,KAAK,CAAG,GAAI,CAAAC,KAAK,CAAC,iCAAiC,CAAC,CAC1DD,KAAK,CAACE,IAAI,CAAC,CAAC,CAChB,CAAC,CAEDtK,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAuK,sBAAsB,CAAGA,CAAA,GAAM,CACjCnJ,gBAAgB,CAACoJ,QAAQ,CAACC,eAAe,GAAK,SAAS,CAAC,CAC5D,CAAC,CAEDD,QAAQ,CAACE,gBAAgB,CAAC,kBAAkB,CAAEH,sBAAsB,CAAC,CAErE,MAAO,IAAM,CACTC,QAAQ,CAACG,mBAAmB,CAAC,kBAAkB,CAAEJ,sBAAsB,CAAC,CAC5E,CAAC,CACL,CAAC,CAAE,EAAE,CAAC,CAENvK,SAAS,CAAC,IAAM,CACZ,KAAM,CAAA4K,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC7B,GAAInJ,YAAY,CAACW,MAAM,GAAK,CAAC,CAAE,OAAQ;AAEvC,KAAM,CAAA2F,OAAO,CAAGtG,YAAY,CAAC,CAAC,CAAC,CAAE;AAEjC,GAAIF,aAAa,CAACwG,OAAO,CAACrD,EAAE,CAAC,GAAK,SAAS,CAAE,CACzC,GAAI,CACAQ,OAAO,CAACyD,GAAG,CAAC,oBAAoB,CAAEZ,OAAO,CAAC,CAE1C,KAAM,CAAE8C,MAAM,CAAEC,OAAQ,CAAC,CAAG,KAAM,CAAAzK,QAAQ,CACrC0E,IAAI,CAAC,UAAU,CAAC,CAChBgG,MAAM,CAAC,CAAC,CAAE/C,OAAO,CAAED,OAAO,CAACC,OAAO,CAAEgD,OAAO,CAAEjD,OAAO,CAACiD,OAAO,CAAExC,OAAO,CAAET,OAAO,CAACS,OAAQ,CAAC,CAAC,CAAC,CAE/F,GAAIsC,OAAO,CAAE,CACT;AACAtJ,gBAAgB,CAACyJ,UAAU,GAAK,CAC5B,GAAGA,UAAU,CACb,CAAClD,OAAO,CAACrD,EAAE,EAAG,QAClB,CAAC,CAAC,CAAC,CACH,KAAM,CAAAoG,OAAO,CACjB,CAEA;AACAtJ,gBAAgB,CAACyJ,UAAU,GAAK,CAC5B,GAAGA,UAAU,CACb,CAAClD,OAAO,CAACrD,EAAE,EAAG,MAClB,CAAC,CAAC,CAAC,CAEH;AACAhD,eAAe,CAAEwJ,SAAS,EAAKA,SAAS,CAACxB,KAAK,CAAC,CAAC,CAAC,CAAC,CAEtD,CAAE,MAAO7E,KAAK,CAAE,CACZK,OAAO,CAACL,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAElD;AACArD,gBAAgB,CAACyJ,UAAU,GAAK,CAC5B,GAAGA,UAAU,CACb,CAAClD,OAAO,CAACrD,EAAE,EAAG,QAClB,CAAC,CAAC,CAAC,CACP,CACJ,CACJ,CAAC,CAED,GAAIjD,YAAY,CAACW,MAAM,CAAG,CAAC,CAAE,CACzBwI,YAAY,CAAC,CAAC,CAClB,CACJ,CAAC,CAAE,CAACnJ,YAAY,CAAEF,aAAa,CAAC,CAAC,CAGjC,MAAO,KAAI,CACf,CAAC,CAED,cAAe,CAAAhB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}