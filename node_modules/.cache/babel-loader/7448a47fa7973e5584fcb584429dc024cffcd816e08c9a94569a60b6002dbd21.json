{"ast":null,"code":"import React,{useEffect,memo,useContext}from'react';import styles from'../styles/ChatList.module.css';import UserContext from'../../../components/UserContext';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ChatItem=/*#__PURE__*/memo(_ref=>{let{chat,selectChat,newMessagesCount}=_ref;const{userId}=useContext(UserContext);// Получаем userId из контекста\n// Определяем собеседника, исключая текущего пользователя\nconst otherUser=chat.is_group?null:chat.membersInfo&&chat.membersInfo.find(member=>member.auth_id!==userId);// Определяем имя и аватар чата\nconst chatName=chat.is_group?chat.name||'Группа без названия':otherUser?\"\".concat(otherUser.first_name,\" \").concat(otherUser.last_name):'Неизвестный пользователь';const chatAvatar=chat.is_group?chat.photo_url||'default-group-avatar-url':(otherUser===null||otherUser===void 0?void 0:otherUser.avatar_url)||'default-avatar-url';const lastMessage=chat.last_message?chat.last_message:null;const lastMessageTime=lastMessage?new Date(lastMessage.created_at).toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'}):'';const lastMessageText=lastMessage?lastMessage.content:'Нет сообщений';const unreadCount=newMessagesCount[chat.id]||0;// Следим за изменениями чата (при необходимости)\nuseEffect(()=>{console.log(\"Chat \".concat(chat.id,\" updated\"));},[chat]);return/*#__PURE__*/_jsxs(\"div\",{className:styles.chat,onClick:()=>selectChat(chat.id),children:[/*#__PURE__*/_jsx(\"div\",{className:styles.avatar,style:{backgroundImage:\"url(\".concat(chatAvatar,\")\")}}),/*#__PURE__*/_jsxs(\"div\",{className:styles.details,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.name,children:chatName}),/*#__PURE__*/_jsx(\"div\",{className:styles.lastMessage,children:lastMessageText})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.meta,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.time,children:lastMessageTime}),unreadCount>0&&/*#__PURE__*/_jsx(\"div\",{className:styles.newMessages,children:unreadCount})]})]},chat.id);});export default ChatItem;","map":{"version":3,"names":["React","useEffect","memo","useContext","styles","UserContext","jsx","_jsx","jsxs","_jsxs","ChatItem","_ref","chat","selectChat","newMessagesCount","userId","otherUser","is_group","membersInfo","find","member","auth_id","chatName","name","concat","first_name","last_name","chatAvatar","photo_url","avatar_url","lastMessage","last_message","lastMessageTime","Date","created_at","toLocaleTimeString","hour","minute","lastMessageText","content","unreadCount","id","console","log","className","onClick","children","avatar","style","backgroundImage","details","meta","time","newMessages"],"sources":["C:/Users/player/Documents/GitHub/synask-app/src/pages/messenger/components/ChatItem.js"],"sourcesContent":["import React, { useEffect, memo, useContext } from 'react';\r\nimport styles from '../styles/ChatList.module.css';\r\nimport UserContext from '../../../components/UserContext';\r\n\r\nconst ChatItem = memo(({ chat, selectChat, newMessagesCount }) => {\r\n  const { userId } = useContext(UserContext);  // Получаем userId из контекста\r\n\r\n  // Определяем собеседника, исключая текущего пользователя\r\n  const otherUser = chat.is_group\r\n    ? null\r\n    : chat.membersInfo && chat.membersInfo.find(member => member.auth_id !== userId);\r\n\r\n  // Определяем имя и аватар чата\r\n  const chatName = chat.is_group\r\n    ? chat.name || 'Группа без названия'\r\n    : otherUser\r\n      ? `${otherUser.first_name} ${otherUser.last_name}`\r\n      : 'Неизвестный пользователь';\r\n\r\n  const chatAvatar = chat.is_group\r\n    ? chat.photo_url || 'default-group-avatar-url'\r\n    : otherUser?.avatar_url || 'default-avatar-url';\r\n\r\n  const lastMessage = chat.last_message ? chat.last_message : null;\r\n  const lastMessageTime = lastMessage\r\n    ? new Date(lastMessage.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\r\n    : '';\r\n\r\n  const lastMessageText = lastMessage ? lastMessage.content : 'Нет сообщений';\r\n  const unreadCount = newMessagesCount[chat.id] || 0;\r\n\r\n  // Следим за изменениями чата (при необходимости)\r\n  useEffect(() => {\r\n    console.log(`Chat ${chat.id} updated`);\r\n  }, [chat]);\r\n\r\n  return (\r\n    <div className={styles.chat} key={chat.id} onClick={() => selectChat(chat.id)}>\r\n      <div className={styles.avatar} style={{ backgroundImage: `url(${chatAvatar})` }}></div>\r\n      <div className={styles.details}>\r\n        <div className={styles.name}>{chatName}</div>\r\n        <div className={styles.lastMessage}>{lastMessageText}</div>\r\n      </div>\r\n      <div className={styles.meta}>\r\n        <div className={styles.time}>{lastMessageTime}</div>\r\n        {unreadCount > 0 && <div className={styles.newMessages}>{unreadCount}</div>}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default ChatItem;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}