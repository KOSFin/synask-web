{"ast":null,"code":"// cacheUtils.js\n// Функция для получения размера IndexedDB\nexport const getIndexedDBSize=async()=>{const dbs=await window.indexedDB.databases();let totalSize=0;for(const db of dbs){const request=indexedDB.open(db.name);totalSize+=await new Promise(resolve=>{request.onsuccess=event=>{const dbInstance=event.target.result;const transaction=dbInstance.transaction(db.objectStoreNames,'readonly');let size=0;transaction.objectStore(db.objectStoreNames[0]).openCursor().onsuccess=event=>{const cursor=event.target.result;if(cursor){size+=JSON.stringify(cursor.value).length;cursor.continue();}else{resolve(size/(1024*1024));// возвращаем размер в МБ\n}};};});}return totalSize;};// Функция для получения размера Local Storage\nexport const getLocalStorageSize=()=>{let totalSize=0;for(let key in localStorage){if(localStorage.hasOwnProperty(key)){const value=localStorage.getItem(key);totalSize+=key.length+value.length;}}return totalSize/(1024*1024);// возвращаем размер в МБ\n};// Функция для очистки Local Storage\nexport const clearLocalStorage=categories=>{return new Promise((resolve,reject)=>{try{// Логика для очистки данных\ncategories.forEach(category=>{// Очистить категории из локального хранилища\nlocalStorage.removeItem(category);});resolve(100);// Например, возвращаем 100 MB освободившегося места\n}catch(error){reject(error);}});};","map":{"version":3,"names":["getIndexedDBSize","dbs","window","indexedDB","databases","totalSize","db","request","open","name","Promise","resolve","onsuccess","event","dbInstance","target","result","transaction","objectStoreNames","size","objectStore","openCursor","cursor","JSON","stringify","value","length","continue","getLocalStorageSize","key","localStorage","hasOwnProperty","getItem","clearLocalStorage","categories","reject","forEach","category","removeItem","error"],"sources":["C:/Users/player/Documents/GitHub/synask-app/src/pages/settings/cacheUtils.js"],"sourcesContent":["// cacheUtils.js\r\n\r\n// Функция для получения размера IndexedDB\r\nexport const getIndexedDBSize = async () => {\r\n    const dbs = await window.indexedDB.databases();\r\n    let totalSize = 0;\r\n\r\n    for (const db of dbs) {\r\n        const request = indexedDB.open(db.name);\r\n        totalSize += await new Promise((resolve) => {\r\n            request.onsuccess = (event) => {\r\n                const dbInstance = event.target.result;\r\n                const transaction = dbInstance.transaction(db.objectStoreNames, 'readonly');\r\n                let size = 0;\r\n\r\n                transaction.objectStore(db.objectStoreNames[0]).openCursor().onsuccess = (event) => {\r\n                    const cursor = event.target.result;\r\n                    if (cursor) {\r\n                        size += JSON.stringify(cursor.value).length;\r\n                        cursor.continue();\r\n                    } else {\r\n                        resolve(size / (1024 * 1024)); // возвращаем размер в МБ\r\n                    }\r\n                };\r\n            };\r\n        });\r\n    }\r\n    return totalSize;\r\n};\r\n\r\n// Функция для получения размера Local Storage\r\nexport const getLocalStorageSize = () => {\r\n    let totalSize = 0;\r\n    for (let key in localStorage) {\r\n        if (localStorage.hasOwnProperty(key)) {\r\n            const value = localStorage.getItem(key);\r\n            totalSize += key.length + value.length;\r\n        }\r\n    }\r\n    return totalSize / (1024 * 1024); // возвращаем размер в МБ\r\n};\r\n\r\n// Функция для очистки Local Storage\r\nexport const clearLocalStorage = (categories) => {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            // Логика для очистки данных\r\n            categories.forEach(category => {\r\n                // Очистить категории из локального хранилища\r\n                localStorage.removeItem(category);\r\n            });\r\n            resolve(100); // Например, возвращаем 100 MB освободившегося места\r\n        } catch (error) {\r\n            reject(error);\r\n        }\r\n    });\r\n};\r\n"],"mappings":"AAAA;AAEA;AACA,MAAO,MAAM,CAAAA,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACxC,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAC,MAAM,CAACC,SAAS,CAACC,SAAS,CAAC,CAAC,CAC9C,GAAI,CAAAC,SAAS,CAAG,CAAC,CAEjB,IAAK,KAAM,CAAAC,EAAE,GAAI,CAAAL,GAAG,CAAE,CAClB,KAAM,CAAAM,OAAO,CAAGJ,SAAS,CAACK,IAAI,CAACF,EAAE,CAACG,IAAI,CAAC,CACvCJ,SAAS,EAAI,KAAM,IAAI,CAAAK,OAAO,CAAEC,OAAO,EAAK,CACxCJ,OAAO,CAACK,SAAS,CAAIC,KAAK,EAAK,CAC3B,KAAM,CAAAC,UAAU,CAAGD,KAAK,CAACE,MAAM,CAACC,MAAM,CACtC,KAAM,CAAAC,WAAW,CAAGH,UAAU,CAACG,WAAW,CAACX,EAAE,CAACY,gBAAgB,CAAE,UAAU,CAAC,CAC3E,GAAI,CAAAC,IAAI,CAAG,CAAC,CAEZF,WAAW,CAACG,WAAW,CAACd,EAAE,CAACY,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAACG,UAAU,CAAC,CAAC,CAACT,SAAS,CAAIC,KAAK,EAAK,CAChF,KAAM,CAAAS,MAAM,CAAGT,KAAK,CAACE,MAAM,CAACC,MAAM,CAClC,GAAIM,MAAM,CAAE,CACRH,IAAI,EAAII,IAAI,CAACC,SAAS,CAACF,MAAM,CAACG,KAAK,CAAC,CAACC,MAAM,CAC3CJ,MAAM,CAACK,QAAQ,CAAC,CAAC,CACrB,CAAC,IAAM,CACHhB,OAAO,CAACQ,IAAI,EAAI,IAAI,CAAG,IAAI,CAAC,CAAC,CAAE;AACnC,CACJ,CAAC,CACL,CAAC,CACL,CAAC,CAAC,CACN,CACA,MAAO,CAAAd,SAAS,CACpB,CAAC,CAED;AACA,MAAO,MAAM,CAAAuB,mBAAmB,CAAGA,CAAA,GAAM,CACrC,GAAI,CAAAvB,SAAS,CAAG,CAAC,CACjB,IAAK,GAAI,CAAAwB,GAAG,GAAI,CAAAC,YAAY,CAAE,CAC1B,GAAIA,YAAY,CAACC,cAAc,CAACF,GAAG,CAAC,CAAE,CAClC,KAAM,CAAAJ,KAAK,CAAGK,YAAY,CAACE,OAAO,CAACH,GAAG,CAAC,CACvCxB,SAAS,EAAIwB,GAAG,CAACH,MAAM,CAAGD,KAAK,CAACC,MAAM,CAC1C,CACJ,CACA,MAAO,CAAArB,SAAS,EAAI,IAAI,CAAG,IAAI,CAAC,CAAE;AACtC,CAAC,CAED;AACA,MAAO,MAAM,CAAA4B,iBAAiB,CAAIC,UAAU,EAAK,CAC7C,MAAO,IAAI,CAAAxB,OAAO,CAAC,CAACC,OAAO,CAAEwB,MAAM,GAAK,CACpC,GAAI,CACA;AACAD,UAAU,CAACE,OAAO,CAACC,QAAQ,EAAI,CAC3B;AACAP,YAAY,CAACQ,UAAU,CAACD,QAAQ,CAAC,CACrC,CAAC,CAAC,CACF1B,OAAO,CAAC,GAAG,CAAC,CAAE;AAClB,CAAE,MAAO4B,KAAK,CAAE,CACZJ,MAAM,CAACI,KAAK,CAAC,CACjB,CACJ,CAAC,CAAC,CACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}