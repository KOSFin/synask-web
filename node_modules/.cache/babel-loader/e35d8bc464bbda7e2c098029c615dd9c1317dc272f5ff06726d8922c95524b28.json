{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\player\\\\Documents\\\\GitHub\\\\synask-app\\\\src\\\\pages\\\\Swap.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NfcComponent = () => {\n  _s();\n  const [logs, setLogs] = useState([]);\n  useEffect(() => {\n    if ('NDEFReader' in window) {\n      const ndef = new window.NDEFReader();\n      const scanNFC = async () => {\n        try {\n          await ndef.scan();\n          addLog(\"NFC сканирование началось успешно.\");\n          ndef.addEventListener(\"reading\", event => {\n            const decoder = new TextDecoder();\n            for (const record of event.message.records) {\n              const logMessage = `Тип записи: ${record.recordType}, MIME тип: ${record.mediaType}, Данные: ${decoder.decode(record.data)}`;\n              addLog(logMessage);\n            }\n          });\n        } catch (error) {\n          addLog(`Ошибка: ${error}`);\n        }\n      };\n      scanNFC();\n    } else {\n      addLog(\"Web NFC не поддерживается.\");\n    }\n  }, []);\n  const addLog = message => {\n    setLogs(prevLogs => [...prevLogs, message]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tap NFC Tag\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: 'monospace',\n        whiteSpace: 'pre-wrap',\n        color: 'white'\n      },\n      children: logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: log\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(NfcComponent, \"6h9FKNtuyCQaVwwdLqmS9omOzEQ=\");\n_c = NfcComponent;\nexport default NfcComponent;\nvar _c;\n$RefreshReg$(_c, \"NfcComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","NfcComponent","_s","logs","setLogs","window","ndef","NDEFReader","scanNFC","scan","addLog","addEventListener","event","decoder","TextDecoder","record","message","records","logMessage","recordType","mediaType","decode","data","error","prevLogs","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","fontFamily","whiteSpace","color","map","log","index","_c","$RefreshReg$"],"sources":["C:/Users/player/Documents/GitHub/synask-app/src/pages/Swap.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst NfcComponent = () => {\r\n  const [logs, setLogs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if ('NDEFReader' in window) {\r\n      const ndef = new window.NDEFReader();\r\n\r\n      const scanNFC = async () => {\r\n        try {\r\n          await ndef.scan();\r\n          addLog(\"NFC сканирование началось успешно.\");\r\n\r\n          ndef.addEventListener(\"reading\", event => {\r\n            const decoder = new TextDecoder();\r\n            for (const record of event.message.records) {\r\n              const logMessage = `Тип записи: ${record.recordType}, MIME тип: ${record.mediaType}, Данные: ${decoder.decode(record.data)}`;\r\n              addLog(logMessage);\r\n            }\r\n          });\r\n        } catch (error) {\r\n          addLog(`Ошибка: ${error}`);\r\n        }\r\n      };\r\n\r\n      scanNFC();\r\n    } else {\r\n      addLog(\"Web NFC не поддерживается.\");\r\n    }\r\n  }, []);\r\n\r\n  const addLog = (message) => {\r\n    setLogs(prevLogs => [...prevLogs, message]);\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h1>Tap NFC Tag</h1>\r\n      <div style={{ fontFamily: 'monospace', whiteSpace: 'pre-wrap', color: 'white'}}>\r\n        {logs.map((log, index) => (\r\n          <div key={index}>{log}</div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NfcComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd,IAAI,YAAY,IAAIO,MAAM,EAAE;MAC1B,MAAMC,IAAI,GAAG,IAAID,MAAM,CAACE,UAAU,CAAC,CAAC;MAEpC,MAAMC,OAAO,GAAG,MAAAA,CAAA,KAAY;QAC1B,IAAI;UACF,MAAMF,IAAI,CAACG,IAAI,CAAC,CAAC;UACjBC,MAAM,CAAC,oCAAoC,CAAC;UAE5CJ,IAAI,CAACK,gBAAgB,CAAC,SAAS,EAAEC,KAAK,IAAI;YACxC,MAAMC,OAAO,GAAG,IAAIC,WAAW,CAAC,CAAC;YACjC,KAAK,MAAMC,MAAM,IAAIH,KAAK,CAACI,OAAO,CAACC,OAAO,EAAE;cAC1C,MAAMC,UAAU,GAAG,eAAeH,MAAM,CAACI,UAAU,eAAeJ,MAAM,CAACK,SAAS,aAAaP,OAAO,CAACQ,MAAM,CAACN,MAAM,CAACO,IAAI,CAAC,EAAE;cAC5HZ,MAAM,CAACQ,UAAU,CAAC;YACpB;UACF,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;UACdb,MAAM,CAAC,WAAWa,KAAK,EAAE,CAAC;QAC5B;MACF,CAAC;MAEDf,OAAO,CAAC,CAAC;IACX,CAAC,MAAM;MACLE,MAAM,CAAC,4BAA4B,CAAC;IACtC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,MAAM,GAAIM,OAAO,IAAK;IAC1BZ,OAAO,CAACoB,QAAQ,IAAI,CAAC,GAAGA,QAAQ,EAAER,OAAO,CAAC,CAAC;EAC7C,CAAC;EAED,oBACEhB,OAAA;IAAKyB,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC9B3B,OAAA;MAAA2B,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpB/B,OAAA;MAAKyB,KAAK,EAAE;QAAEO,UAAU,EAAE,WAAW;QAAEC,UAAU,EAAE,UAAU;QAAEC,KAAK,EAAE;MAAO,CAAE;MAAAP,QAAA,EAC5ExB,IAAI,CAACgC,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACnBrC,OAAA;QAAA2B,QAAA,EAAkBS;MAAG,GAAXC,KAAK;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAC5B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC7B,EAAA,CA5CID,YAAY;AAAAqC,EAAA,GAAZrC,YAAY;AA8ClB,eAAeA,YAAY;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}