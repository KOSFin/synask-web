{"ast":null,"code":"import React,{useState,useContext,useEffect}from'react';import{useNavigate}from'react-router-dom';import UserContext from'./UserContext';import{supabase}from'../pages/config/SupabaseClient';import load from'../pages/Loader.module.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ProtectedRoute=_ref=>{let{children}=_ref;const[isAuthenticated,setIsAuthenticated]=useState(null);const[loading,setLoading]=useState(true);const[userId,setUserId]=useState(null);const navigate=useNavigate();const{userData,setUserData,friends,setFriends}=useContext(UserContext);var UserData={};const arraysAreEqual=(arr1,arr2)=>{if(arr1.length!==arr2.length){return false;}for(let i=0;i<arr1.length;i++){if(arr1[i]!==arr2[i]){return false;}}return true;};useEffect(()=>{const checkSession=async()=>{console.log('Checking session...');const{data,error}=await supabase.auth.getUser();if(error){console.error('Error checking session:',error);setIsAuthenticated(false);setLoading(false);return;}if(data){console.log('User authenticated:',data.user.id);setIsAuthenticated(true);setUserId(data.user.id);// Далее проверяем статус работы соцсети\nconst{data:techData,error:techError}=await supabase.from('_tech_').select('status_work, participants').eq('name','technical works').single();if(techError){console.error('Error fetching tech status:',techError);setLoading(false);return;}const statusWork=techData===null||techData===void 0?void 0:techData.status_work;const participants=(techData===null||techData===void 0?void 0:techData.participants)||[];// Логика перенаправления в зависимости от статуса работы\nif(statusWork===0||statusWork===2){// Если технические работы или сбой, перенаправляем на /info\nconsole.log('Redirecting to /info due to technical status...');navigate('/info');}else if(statusWork===3){// Если бета-тест, проверяем, находится ли пользователь в списке участников\nconst isParticipant=participants.some(participant=>participant===data.user.id);if(!isParticipant){// Если пользователь не является участником бета-теста, перенаправляем на /info\nconsole.log('Redirecting to /info due to beta test...');navigate('/info');}}// Если статус \"Всё работает\", ничего не делаем\n}else{console.log('User not authenticated');setIsAuthenticated(false);}setLoading(false);};checkSession();},[]);useEffect(()=>{if(!userId)return;const fetchInitialData=async()=>{console.log('Fetching initial data...');try{const{data:dataPub,error:errorPub}=await supabase.from('users_public_information').select('*').eq('auth_id',userId).single();if(errorPub)throw errorPub;if(!dataPub){window.location.href=\"/info\";}console.log('Initial data fetched:',dataPub);const{data:dataPriv,error:errorPriv}=await supabase.from('users_private_information').select('*').eq('auth_id',userId).single();if(errorPriv)throw errorPriv;console.log('Initial data fetched:',dataPriv);// Set user data\nUserData={auth_id:dataPub.auth_id,first_name:dataPub.first_name,last_name:dataPub.last_name,avatar_url:dataPub.avatar_url,status:dataPub.status,username:dataPub.username,contacts:dataPriv.contacts};setUserData(UserData);// Extract contacts\nconst initialContacts=dataPriv.contacts||[];console.log('Initial contacts:',initialContacts);updateFriendsList(initialContacts);// Subscribe to changes\nconst userChannel=supabase.channel(\"user:\".concat(userId)).on('postgres_changes',{event:'UPDATE',schema:'public',table:'users_public_information',filter:\"auth_id=eq.\".concat(userId)},payload=>{console.log('Public information change detected:',payload);handleUserDataChange(payload);}).on('postgres_changes',{event:'UPDATE',schema:'public',table:'users_private_information',filter:\"auth_id=eq.\".concat(userId)},payload=>{console.log('Private information change detected:',payload);handleUserDataChange(payload);}).subscribe();// Function to handle the update\nfunction handleUserDataChange(payload){console.log(payload.new.contacts,UserData.contacts);if(!arraysAreEqual(payload.new.contacts||[],UserData.contacts||[])){const newContacts=payload.new.contacts||[];console.log('Contacts updated:',newContacts);console.log('UserData:',UserData);const updatedUserData={...UserData,contacts:newContacts};UserData=updatedUserData;setUserData(updatedUserData);updateFriendsList(newContacts);}else{UserData={auth_id:payload.new.auth_id,first_name:payload.new.first_name,last_name:payload.new.last_name,avatar_url:payload.new.avatar_url,status:payload.new.status,username:payload.new.username,contacts:payload.new.contacts};setUserData(UserData);}}// Subscribe to changes for each contact\nconst friendsChannels=initialContacts.map(auth_id=>supabase.channel(\"contact:\".concat(auth_id)).on('postgres_changes',{event:'UPDATE',schema:'public',table:'users_public_information',filter:\"auth_id=eq.\".concat(auth_id)},payload=>{console.log('Contact status change detected:',payload);setFriends(prev=>prev.map(friend=>friend.auth_id===payload.new.auth_id?{...friend,status:payload.new.status}:friend));}).subscribe());return()=>{console.log('Removing user channel');supabase.removeChannel(userChannel);friendsChannels.forEach(channel=>supabase.removeChannel(channel));};}catch(error){console.error('Error fetching initial data:',error);}};const updateFriendsList=async contacts=>{console.log('Updating friends list...');const currentFriendsIds=friends.map(friend=>friend.auth_id);const newFriendsIds=contacts.filter(auth_id=>!currentFriendsIds.includes(auth_id));const removedFriends=friends.filter(friend=>!contacts.includes(friend.auth_id));console.log('Removed friends:',removedFriends);setFriends(prev=>prev.filter(friend=>!removedFriends.some(removedFriend=>removedFriend.auth_id===friend.auth_id)));if(newFriendsIds.length>0){const{data,error}=await supabase.from('users_public_information').select('auth_id, username, first_name, last_name, avatar_url, cover_url, status, tags').in('auth_id',newFriendsIds);if(error){console.error('Error fetching new friends data:',error);return;}console.log('New friends data:',data);setFriends(data);}};fetchInitialData();},[userId]);if(loading)return/*#__PURE__*/_jsxs(\"div\",{className:load.spinner,children:[/*#__PURE__*/_jsx(\"div\",{}),/*#__PURE__*/_jsx(\"div\",{}),/*#__PURE__*/_jsx(\"div\",{})]});return isAuthenticated?children:/*#__PURE__*/_jsx(RedirectToLogin,{});};const RedirectToLogin=()=>{useEffect(()=>{console.log('Redirecting to login...');window.location.href=\"/login.html\";},[]);return null;};export default ProtectedRoute;","map":{"version":3,"names":["React","useState","useContext","useEffect","useNavigate","UserContext","supabase","load","jsx","_jsx","jsxs","_jsxs","ProtectedRoute","_ref","children","isAuthenticated","setIsAuthenticated","loading","setLoading","userId","setUserId","navigate","userData","setUserData","friends","setFriends","UserData","arraysAreEqual","arr1","arr2","length","i","checkSession","console","log","data","error","auth","getUser","user","id","techData","techError","from","select","eq","single","statusWork","status_work","participants","isParticipant","some","participant","fetchInitialData","dataPub","errorPub","window","location","href","dataPriv","errorPriv","auth_id","first_name","last_name","avatar_url","status","username","contacts","initialContacts","updateFriendsList","userChannel","channel","concat","on","event","schema","table","filter","payload","handleUserDataChange","subscribe","new","newContacts","updatedUserData","friendsChannels","map","prev","friend","removeChannel","forEach","currentFriendsIds","newFriendsIds","includes","removedFriends","removedFriend","in","className","spinner","RedirectToLogin"],"sources":["C:/Users/player/Documents/GitHub/synask-app/src/components/ProtectedRoute.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport UserContext from './UserContext';\r\nimport { supabase } from '../pages/config/SupabaseClient';\r\nimport load from '../pages/Loader.module.css';\r\n\r\nconst ProtectedRoute = ({ children }) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [userId, setUserId] = useState(null);\r\n    const navigate = useNavigate();\r\n    const { userData, setUserData, friends, setFriends } = useContext(UserContext);\r\n    var UserData = {};\r\n\r\n    const arraysAreEqual = (arr1, arr2) => {\r\n      if (arr1.length !== arr2.length) {\r\n        return false;\r\n      }\r\n      for (let i = 0; i < arr1.length; i++) {\r\n        if (arr1[i] !== arr2[i]) {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const checkSession = async () => {\r\n            console.log('Checking session...');\r\n            const { data, error } = await supabase.auth.getUser();\r\n            if (error) {\r\n                console.error('Error checking session:', error);\r\n                setIsAuthenticated(false);\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            if (data) {\r\n                console.log('User authenticated:', data.user.id);\r\n                setIsAuthenticated(true);\r\n                setUserId(data.user.id);\r\n\r\n                // Далее проверяем статус работы соцсети\r\n                const { data: techData, error: techError } = await supabase\r\n                    .from('_tech_')\r\n                    .select('status_work, participants')\r\n                    .eq('name', 'technical works')\r\n                    .single();\r\n\r\n                if (techError) {\r\n                    console.error('Error fetching tech status:', techError);\r\n                    setLoading(false);\r\n                    return;\r\n                }\r\n\r\n                const statusWork = techData?.status_work;\r\n                const participants = techData?.participants || [];\r\n\r\n                // Логика перенаправления в зависимости от статуса работы\r\n                if (statusWork === 0 || statusWork === 2) {\r\n                    // Если технические работы или сбой, перенаправляем на /info\r\n                    console.log('Redirecting to /info due to technical status...');\r\n                    navigate('/info');\r\n                } else if (statusWork === 3) {\r\n                    // Если бета-тест, проверяем, находится ли пользователь в списке участников\r\n                    const isParticipant = participants.some(participant => participant === data.user.id);\r\n                    if (!isParticipant) {\r\n                        // Если пользователь не является участником бета-теста, перенаправляем на /info\r\n                        console.log('Redirecting to /info due to beta test...');\r\n                        navigate('/info');\r\n                    }\r\n                }\r\n                // Если статус \"Всё работает\", ничего не делаем\r\n            } else {\r\n                console.log('User not authenticated');\r\n                setIsAuthenticated(false);\r\n            }\r\n            setLoading(false);\r\n        };\r\n\r\n        checkSession();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (!userId) return;\r\n\r\n        const fetchInitialData = async () => {\r\n            console.log('Fetching initial data...');\r\n            try {\r\n                const { data: dataPub, error: errorPub } = await supabase\r\n                    .from('users_public_information')\r\n                    .select('*')\r\n                    .eq('auth_id', userId)\r\n                    .single();\r\n\r\n                if (errorPub) throw errorPub;\r\n\r\n                if (!dataPub) {\r\n                    window.location.href = \"/info\";\r\n                }\r\n\r\n                console.log('Initial data fetched:', dataPub);\r\n\r\n                const { data: dataPriv, error: errorPriv } = await supabase\r\n                    .from('users_private_information')\r\n                    .select('*')\r\n                    .eq('auth_id', userId)\r\n                    .single();\r\n\r\n                if (errorPriv) throw errorPriv;\r\n\r\n                console.log('Initial data fetched:', dataPriv);\r\n\r\n                // Set user data\r\n                UserData = {\r\n                    auth_id: dataPub.auth_id,\r\n                    first_name: dataPub.first_name,\r\n                    last_name: dataPub.last_name,\r\n                    avatar_url: dataPub.avatar_url,\r\n                    status: dataPub.status,\r\n                    username: dataPub.username,\r\n                    contacts: dataPriv.contacts\r\n                };\r\n                setUserData(UserData);\r\n\r\n                // Extract contacts\r\n                const initialContacts = dataPriv.contacts || [];\r\n                console.log('Initial contacts:', initialContacts);\r\n                updateFriendsList(initialContacts);\r\n\r\n                // Subscribe to changes\r\n                const userChannel = supabase\r\n                  .channel(`user:${userId}`)\r\n                  .on(\r\n                    'postgres_changes',\r\n                    { event: 'UPDATE', schema: 'public', table: 'users_public_information', filter: `auth_id=eq.${userId}` },\r\n                    (payload) => {\r\n                      console.log('Public information change detected:', payload);\r\n                      handleUserDataChange(payload);\r\n                    }\r\n                  )\r\n                  .on(\r\n                    'postgres_changes',\r\n                    { event: 'UPDATE', schema: 'public', table: 'users_private_information', filter: `auth_id=eq.${userId}` },\r\n                    (payload) => {\r\n                      console.log('Private information change detected:', payload);\r\n                      handleUserDataChange(payload);\r\n                    }\r\n                  )\r\n                  .subscribe();\r\n\r\n                // Function to handle the update\r\n                function handleUserDataChange(payload) {\r\n                  console.log(payload.new.contacts, UserData.contacts);\r\n                  if (!arraysAreEqual(payload.new.contacts || [], UserData.contacts || [])) {\r\n                    const newContacts = payload.new.contacts || [];\r\n                    console.log('Contacts updated:', newContacts);\r\n                    console.log('UserData:', UserData);\r\n                    const updatedUserData = {\r\n                      ...UserData,\r\n                      contacts: newContacts\r\n                    };\r\n                    UserData = updatedUserData\r\n                    setUserData(updatedUserData);\r\n                    updateFriendsList(newContacts);\r\n                  } else {\r\n                    UserData = {\r\n                      auth_id: payload.new.auth_id,\r\n                      first_name: payload.new.first_name,\r\n                      last_name: payload.new.last_name,\r\n                      avatar_url: payload.new.avatar_url,\r\n                      status: payload.new.status,\r\n                      username: payload.new.username,\r\n                      contacts: payload.new.contacts,\r\n                    };\r\n                    setUserData(UserData);\r\n                  }\r\n                }\r\n\r\n\r\n                // Subscribe to changes for each contact\r\n                const friendsChannels = initialContacts.map(auth_id =>\r\n                    supabase\r\n                        .channel(`contact:${auth_id}`)\r\n                        .on('postgres_changes', { event: 'UPDATE', schema: 'public', table: 'users_public_information', filter: `auth_id=eq.${auth_id}` },\r\n                            (payload) => {\r\n                                console.log('Contact status change detected:', payload);\r\n                                setFriends(prev =>\r\n                                    prev.map(friend =>\r\n                                        friend.auth_id === payload.new.auth_id ? { ...friend, status: payload.new.status } : friend\r\n                                    )\r\n                                );\r\n                            }\r\n                        )\r\n                        .subscribe()\r\n                );\r\n\r\n                return () => {\r\n                    console.log('Removing user channel');\r\n                    supabase.removeChannel(userChannel);\r\n                    friendsChannels.forEach(channel => supabase.removeChannel(channel));\r\n                };\r\n            } catch (error) {\r\n                console.error('Error fetching initial data:', error);\r\n            }\r\n        };\r\n\r\n        const updateFriendsList = async (contacts) => {\r\n              console.log('Updating friends list...');\r\n              const currentFriendsIds = friends.map(friend => friend.auth_id);\r\n              const newFriendsIds = contacts.filter(auth_id => !currentFriendsIds.includes(auth_id));\r\n              const removedFriends = friends.filter(friend => !contacts.includes(friend.auth_id));\r\n\r\n              console.log('Removed friends:', removedFriends);\r\n              setFriends(prev => prev.filter(friend => !removedFriends.some(removedFriend => removedFriend.auth_id === friend.auth_id)));\r\n\r\n              if (newFriendsIds.length > 0) {\r\n                const { data, error } = await supabase\r\n                  .from('users_public_information')\r\n                  .select('auth_id, username, first_name, last_name, avatar_url, cover_url, status, tags')\r\n                  .in('auth_id', newFriendsIds);\r\n\r\n                if (error) {\r\n                  console.error('Error fetching new friends data:', error);\r\n                  return;\r\n                }\r\n\r\n                console.log('New friends data:', data);\r\n\r\n                setFriends(data);\r\n\r\n            }\r\n        };\r\n\r\n        fetchInitialData();\r\n    }, [userId]);\r\n\r\n    if (loading) return (\r\n        <div className={load.spinner}>\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n        </div>\r\n    );\r\n\r\n    return isAuthenticated ? children : <RedirectToLogin />;\r\n};\r\n\r\nconst RedirectToLogin = () => {\r\n    useEffect(() => {\r\n        console.log('Redirecting to login...');\r\n        window.location.href = \"/login.html\";\r\n    }, []);\r\n    return null;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,UAAU,CAAEC,SAAS,KAAQ,OAAO,CAC9D,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,MAAO,CAAAC,WAAW,KAAM,eAAe,CACvC,OAASC,QAAQ,KAAQ,gCAAgC,CACzD,MAAO,CAAAC,IAAI,KAAM,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE9C,KAAM,CAAAC,cAAc,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAChC,KAAM,CAACE,eAAe,CAAEC,kBAAkB,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CAC5D,KAAM,CAACgB,OAAO,CAAEC,UAAU,CAAC,CAAGjB,QAAQ,CAAC,IAAI,CAAC,CAC5C,KAAM,CAACkB,MAAM,CAAEC,SAAS,CAAC,CAAGnB,QAAQ,CAAC,IAAI,CAAC,CAC1C,KAAM,CAAAoB,QAAQ,CAAGjB,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAEkB,QAAQ,CAAEC,WAAW,CAAEC,OAAO,CAAEC,UAAW,CAAC,CAAGvB,UAAU,CAACG,WAAW,CAAC,CAC9E,GAAI,CAAAqB,QAAQ,CAAG,CAAC,CAAC,CAEjB,KAAM,CAAAC,cAAc,CAAGA,CAACC,IAAI,CAAEC,IAAI,GAAK,CACrC,GAAID,IAAI,CAACE,MAAM,GAAKD,IAAI,CAACC,MAAM,CAAE,CAC/B,MAAO,MAAK,CACd,CACA,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGH,IAAI,CAACE,MAAM,CAAEC,CAAC,EAAE,CAAE,CACpC,GAAIH,IAAI,CAACG,CAAC,CAAC,GAAKF,IAAI,CAACE,CAAC,CAAC,CAAE,CACvB,MAAO,MAAK,CACd,CACF,CACA,MAAO,KAAI,CACb,CAAC,CAED5B,SAAS,CAAC,IAAM,CACZ,KAAM,CAAA6B,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC7BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CAClC,KAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAA9B,QAAQ,CAAC+B,IAAI,CAACC,OAAO,CAAC,CAAC,CACrD,GAAIF,KAAK,CAAE,CACPH,OAAO,CAACG,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/CpB,kBAAkB,CAAC,KAAK,CAAC,CACzBE,UAAU,CAAC,KAAK,CAAC,CACjB,OACJ,CAEA,GAAIiB,IAAI,CAAE,CACNF,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEC,IAAI,CAACI,IAAI,CAACC,EAAE,CAAC,CAChDxB,kBAAkB,CAAC,IAAI,CAAC,CACxBI,SAAS,CAACe,IAAI,CAACI,IAAI,CAACC,EAAE,CAAC,CAEvB;AACA,KAAM,CAAEL,IAAI,CAAEM,QAAQ,CAAEL,KAAK,CAAEM,SAAU,CAAC,CAAG,KAAM,CAAApC,QAAQ,CACtDqC,IAAI,CAAC,QAAQ,CAAC,CACdC,MAAM,CAAC,2BAA2B,CAAC,CACnCC,EAAE,CAAC,MAAM,CAAE,iBAAiB,CAAC,CAC7BC,MAAM,CAAC,CAAC,CAEb,GAAIJ,SAAS,CAAE,CACXT,OAAO,CAACG,KAAK,CAAC,6BAA6B,CAAEM,SAAS,CAAC,CACvDxB,UAAU,CAAC,KAAK,CAAC,CACjB,OACJ,CAEA,KAAM,CAAA6B,UAAU,CAAGN,QAAQ,SAARA,QAAQ,iBAARA,QAAQ,CAAEO,WAAW,CACxC,KAAM,CAAAC,YAAY,CAAG,CAAAR,QAAQ,SAARA,QAAQ,iBAARA,QAAQ,CAAEQ,YAAY,GAAI,EAAE,CAEjD;AACA,GAAIF,UAAU,GAAK,CAAC,EAAIA,UAAU,GAAK,CAAC,CAAE,CACtC;AACAd,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC,CAC9Db,QAAQ,CAAC,OAAO,CAAC,CACrB,CAAC,IAAM,IAAI0B,UAAU,GAAK,CAAC,CAAE,CACzB;AACA,KAAM,CAAAG,aAAa,CAAGD,YAAY,CAACE,IAAI,CAACC,WAAW,EAAIA,WAAW,GAAKjB,IAAI,CAACI,IAAI,CAACC,EAAE,CAAC,CACpF,GAAI,CAACU,aAAa,CAAE,CAChB;AACAjB,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC,CACvDb,QAAQ,CAAC,OAAO,CAAC,CACrB,CACJ,CACA;AACJ,CAAC,IAAM,CACHY,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC,CACrClB,kBAAkB,CAAC,KAAK,CAAC,CAC7B,CACAE,UAAU,CAAC,KAAK,CAAC,CACrB,CAAC,CAEDc,YAAY,CAAC,CAAC,CAClB,CAAC,CAAE,EAAE,CAAC,CAEN7B,SAAS,CAAC,IAAM,CACZ,GAAI,CAACgB,MAAM,CAAE,OAEb,KAAM,CAAAkC,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACjCpB,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC,CACvC,GAAI,CACA,KAAM,CAAEC,IAAI,CAAEmB,OAAO,CAAElB,KAAK,CAAEmB,QAAS,CAAC,CAAG,KAAM,CAAAjD,QAAQ,CACpDqC,IAAI,CAAC,0BAA0B,CAAC,CAChCC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,CAAE1B,MAAM,CAAC,CACrB2B,MAAM,CAAC,CAAC,CAEb,GAAIS,QAAQ,CAAE,KAAM,CAAAA,QAAQ,CAE5B,GAAI,CAACD,OAAO,CAAE,CACVE,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,OAAO,CAClC,CAEAzB,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEoB,OAAO,CAAC,CAE7C,KAAM,CAAEnB,IAAI,CAAEwB,QAAQ,CAAEvB,KAAK,CAAEwB,SAAU,CAAC,CAAG,KAAM,CAAAtD,QAAQ,CACtDqC,IAAI,CAAC,2BAA2B,CAAC,CACjCC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,CAAE1B,MAAM,CAAC,CACrB2B,MAAM,CAAC,CAAC,CAEb,GAAIc,SAAS,CAAE,KAAM,CAAAA,SAAS,CAE9B3B,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEyB,QAAQ,CAAC,CAE9C;AACAjC,QAAQ,CAAG,CACPmC,OAAO,CAAEP,OAAO,CAACO,OAAO,CACxBC,UAAU,CAAER,OAAO,CAACQ,UAAU,CAC9BC,SAAS,CAAET,OAAO,CAACS,SAAS,CAC5BC,UAAU,CAAEV,OAAO,CAACU,UAAU,CAC9BC,MAAM,CAAEX,OAAO,CAACW,MAAM,CACtBC,QAAQ,CAAEZ,OAAO,CAACY,QAAQ,CAC1BC,QAAQ,CAAER,QAAQ,CAACQ,QACvB,CAAC,CACD5C,WAAW,CAACG,QAAQ,CAAC,CAErB;AACA,KAAM,CAAA0C,eAAe,CAAGT,QAAQ,CAACQ,QAAQ,EAAI,EAAE,CAC/ClC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEkC,eAAe,CAAC,CACjDC,iBAAiB,CAACD,eAAe,CAAC,CAElC;AACA,KAAM,CAAAE,WAAW,CAAGhE,QAAQ,CACzBiE,OAAO,SAAAC,MAAA,CAASrD,MAAM,CAAE,CAAC,CACzBsD,EAAE,CACD,kBAAkB,CAClB,CAAEC,KAAK,CAAE,QAAQ,CAAEC,MAAM,CAAE,QAAQ,CAAEC,KAAK,CAAE,0BAA0B,CAAEC,MAAM,eAAAL,MAAA,CAAgBrD,MAAM,CAAG,CAAC,CACvG2D,OAAO,EAAK,CACX7C,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAE4C,OAAO,CAAC,CAC3DC,oBAAoB,CAACD,OAAO,CAAC,CAC/B,CACF,CAAC,CACAL,EAAE,CACD,kBAAkB,CAClB,CAAEC,KAAK,CAAE,QAAQ,CAAEC,MAAM,CAAE,QAAQ,CAAEC,KAAK,CAAE,2BAA2B,CAAEC,MAAM,eAAAL,MAAA,CAAgBrD,MAAM,CAAG,CAAC,CACxG2D,OAAO,EAAK,CACX7C,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAE4C,OAAO,CAAC,CAC5DC,oBAAoB,CAACD,OAAO,CAAC,CAC/B,CACF,CAAC,CACAE,SAAS,CAAC,CAAC,CAEd;AACA,QAAS,CAAAD,oBAAoBA,CAACD,OAAO,CAAE,CACrC7C,OAAO,CAACC,GAAG,CAAC4C,OAAO,CAACG,GAAG,CAACd,QAAQ,CAAEzC,QAAQ,CAACyC,QAAQ,CAAC,CACpD,GAAI,CAACxC,cAAc,CAACmD,OAAO,CAACG,GAAG,CAACd,QAAQ,EAAI,EAAE,CAAEzC,QAAQ,CAACyC,QAAQ,EAAI,EAAE,CAAC,CAAE,CACxE,KAAM,CAAAe,WAAW,CAAGJ,OAAO,CAACG,GAAG,CAACd,QAAQ,EAAI,EAAE,CAC9ClC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEgD,WAAW,CAAC,CAC7CjD,OAAO,CAACC,GAAG,CAAC,WAAW,CAAER,QAAQ,CAAC,CAClC,KAAM,CAAAyD,eAAe,CAAG,CACtB,GAAGzD,QAAQ,CACXyC,QAAQ,CAAEe,WACZ,CAAC,CACDxD,QAAQ,CAAGyD,eAAe,CAC1B5D,WAAW,CAAC4D,eAAe,CAAC,CAC5Bd,iBAAiB,CAACa,WAAW,CAAC,CAChC,CAAC,IAAM,CACLxD,QAAQ,CAAG,CACTmC,OAAO,CAAEiB,OAAO,CAACG,GAAG,CAACpB,OAAO,CAC5BC,UAAU,CAAEgB,OAAO,CAACG,GAAG,CAACnB,UAAU,CAClCC,SAAS,CAAEe,OAAO,CAACG,GAAG,CAAClB,SAAS,CAChCC,UAAU,CAAEc,OAAO,CAACG,GAAG,CAACjB,UAAU,CAClCC,MAAM,CAAEa,OAAO,CAACG,GAAG,CAAChB,MAAM,CAC1BC,QAAQ,CAAEY,OAAO,CAACG,GAAG,CAACf,QAAQ,CAC9BC,QAAQ,CAAEW,OAAO,CAACG,GAAG,CAACd,QACxB,CAAC,CACD5C,WAAW,CAACG,QAAQ,CAAC,CACvB,CACF,CAGA;AACA,KAAM,CAAA0D,eAAe,CAAGhB,eAAe,CAACiB,GAAG,CAACxB,OAAO,EAC/CvD,QAAQ,CACHiE,OAAO,YAAAC,MAAA,CAAYX,OAAO,CAAE,CAAC,CAC7BY,EAAE,CAAC,kBAAkB,CAAE,CAAEC,KAAK,CAAE,QAAQ,CAAEC,MAAM,CAAE,QAAQ,CAAEC,KAAK,CAAE,0BAA0B,CAAEC,MAAM,eAAAL,MAAA,CAAgBX,OAAO,CAAG,CAAC,CAC5HiB,OAAO,EAAK,CACT7C,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAE4C,OAAO,CAAC,CACvDrD,UAAU,CAAC6D,IAAI,EACXA,IAAI,CAACD,GAAG,CAACE,MAAM,EACXA,MAAM,CAAC1B,OAAO,GAAKiB,OAAO,CAACG,GAAG,CAACpB,OAAO,CAAG,CAAE,GAAG0B,MAAM,CAAEtB,MAAM,CAAEa,OAAO,CAACG,GAAG,CAAChB,MAAO,CAAC,CAAGsB,MACzF,CACJ,CAAC,CACL,CACJ,CAAC,CACAP,SAAS,CAAC,CACnB,CAAC,CAED,MAAO,IAAM,CACT/C,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,CACpC5B,QAAQ,CAACkF,aAAa,CAAClB,WAAW,CAAC,CACnCc,eAAe,CAACK,OAAO,CAAClB,OAAO,EAAIjE,QAAQ,CAACkF,aAAa,CAACjB,OAAO,CAAC,CAAC,CACvE,CAAC,CACL,CAAE,MAAOnC,KAAK,CAAE,CACZH,OAAO,CAACG,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACxD,CACJ,CAAC,CAED,KAAM,CAAAiC,iBAAiB,CAAG,KAAO,CAAAF,QAAQ,EAAK,CACxClC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC,CACvC,KAAM,CAAAwD,iBAAiB,CAAGlE,OAAO,CAAC6D,GAAG,CAACE,MAAM,EAAIA,MAAM,CAAC1B,OAAO,CAAC,CAC/D,KAAM,CAAA8B,aAAa,CAAGxB,QAAQ,CAACU,MAAM,CAAChB,OAAO,EAAI,CAAC6B,iBAAiB,CAACE,QAAQ,CAAC/B,OAAO,CAAC,CAAC,CACtF,KAAM,CAAAgC,cAAc,CAAGrE,OAAO,CAACqD,MAAM,CAACU,MAAM,EAAI,CAACpB,QAAQ,CAACyB,QAAQ,CAACL,MAAM,CAAC1B,OAAO,CAAC,CAAC,CAEnF5B,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAE2D,cAAc,CAAC,CAC/CpE,UAAU,CAAC6D,IAAI,EAAIA,IAAI,CAACT,MAAM,CAACU,MAAM,EAAI,CAACM,cAAc,CAAC1C,IAAI,CAAC2C,aAAa,EAAIA,aAAa,CAACjC,OAAO,GAAK0B,MAAM,CAAC1B,OAAO,CAAC,CAAC,CAAC,CAE1H,GAAI8B,aAAa,CAAC7D,MAAM,CAAG,CAAC,CAAE,CAC5B,KAAM,CAAEK,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAA9B,QAAQ,CACnCqC,IAAI,CAAC,0BAA0B,CAAC,CAChCC,MAAM,CAAC,+EAA+E,CAAC,CACvFmD,EAAE,CAAC,SAAS,CAAEJ,aAAa,CAAC,CAE/B,GAAIvD,KAAK,CAAE,CACTH,OAAO,CAACG,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CACxD,OACF,CAEAH,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAEC,IAAI,CAAC,CAEtCV,UAAU,CAACU,IAAI,CAAC,CAEpB,CACJ,CAAC,CAEDkB,gBAAgB,CAAC,CAAC,CACtB,CAAC,CAAE,CAAClC,MAAM,CAAC,CAAC,CAEZ,GAAIF,OAAO,CAAE,mBACTN,KAAA,QAAKqF,SAAS,CAAEzF,IAAI,CAAC0F,OAAQ,CAAAnF,QAAA,eAC3BL,IAAA,SAAU,CAAC,cACXA,IAAA,SAAU,CAAC,cACXA,IAAA,SAAU,CAAC,EACR,CAAC,CAGV,MAAO,CAAAM,eAAe,CAAGD,QAAQ,cAAGL,IAAA,CAACyF,eAAe,GAAE,CAAC,CAC3D,CAAC,CAED,KAAM,CAAAA,eAAe,CAAGA,CAAA,GAAM,CAC1B/F,SAAS,CAAC,IAAM,CACZ8B,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC,CACtCsB,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,aAAa,CACxC,CAAC,CAAE,EAAE,CAAC,CACN,MAAO,KAAI,CACf,CAAC,CAED,cAAe,CAAA9C,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}